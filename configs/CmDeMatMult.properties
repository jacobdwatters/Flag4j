# These configurations are used to dynamically select the kernel to use when computing a complex dense matrix product.
# It is STRONGLY discouraged to edit these values by hand.

# The number of matrix shape pairs to cache to the kernel to use does not need to be recomputed.
cacheSize = 64

# If the total number of elements in both matrices summed is less than this value, the standard kernel will be used.
# This is regardless of the "squareness". This will trump all the following configs.
smallThreshold = 2450

# For two matrices of shapes (M, N) and (N, K), if max(M, N, K) / min(M, N, K) < aspectThreshold then
# the logic for "near square" matrices will be used to choose the kernel.
aspectThreshold = 2.0

# For "square enough" matrices, if N is less than this value, a concurrent implementation of the standard kernel will be used.
squareMtStandardThreshold = 50

# For "square enough" matrices, if N is less than this value, a concurrent kernel leveraging reordered loops will be used.
# If N is larger than this value, a concurrent kernel leveraging reordered loops and blocking will be used.
squareMtReorderedThreshold = 2048

# For matrices not "square enough", a threshold used to determine if a sequential or concurrent kernel should be used
# bases in the size of the smallest dimensions between the two matrices.
minDimSmallThreshold = 10

# For matrices not "square enough", a threshold used to determine if a which concurrent kernel should be used
# based on the size of the maximum dimensions between the two matrices.
wideMtReorderedThreshold = 25

# When the second matrix is a column vector and the first matrix is "square enough", if N is less than this value, a
# sequential matrix-vector product kernel will be used. Otherwise, a concurrent kernel will be used.
squareStandardVecThreshold = 256
