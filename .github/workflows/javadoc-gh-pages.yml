name: Build and Deploy Javadoc

on:
  push:
    branches:
      - master
      - texify-everything # TODO: This is temporary just for testing.
jobs:
  # 1) Build the Javadoc and upload as artifact
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4.2.2

      - name: Set up JDK 23
        uses: actions/setup-java@v4.7.0
        with:
          distribution: 'zulu'
          java-version: 23

      - name: Build Javadoc
        run: |
          mvn clean install
          mvn javadoc:javadoc \
          -Dmaven.javadoc.failOnError=false \
          -Dmaven.javadoc.skip=false

      - name: Inject MathJax script
        # Adjust path to where your Javadoc output is actually generated
        run: |
          find target/reports/apidocs -type f -name "*.html" -exec \
            sed -i '/<\/head>/i <script type="text/javascript" id="MathJax-script" async \
            src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"> \
            </script>' {} +

#      - name: Convert LaTeX
#        run: |
#          for file in $(find target/reports/apidocs -name "*.html"); do
#            sed -i -E 's@<span class="latex-replaceable">.*?</span>\s*<!-- LATEX: (.*?) -->@\1@g' "$file"
#          done

#      - name: Convert LaTeX
#        run: |
#          find target/reports/apidocs -type f -name "*.html" | while read -r file; do
#            awk '
#            BEGIN { in_latex = 0; replaceable_found = 0; latex_content = "" }
#
#            /<!-- LATEX:/ { in_latex = 1; latex_content = ""; next }  # Start capturing LaTeX
#            in_latex && /-->/ { in_latex = 0; next }  # Stop capturing
#
#            in_latex { latex_content = latex_content $0 "\n"; next }  # Store multi-line LaTeX
#
#            /<span class="latex-replaceable">/ {
#              if (latex_content != "") {
#                print latex_content;  # Replace the span with the stored LaTeX
#              }
#              replaceable_found = 1;
#              next
#            }
#
#            replaceable_found && /<\/span>/ { replaceable_found = 0; next }  # Remove span end tag
#
#            { print }  # Print everything else as normal
#            ' "$file" > temp.html && mv temp.html "$file"
#          done


      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          path: target/reports/apidocs

  # 2) Deploy the artifact to GitHub Pages
  deploy-docs:
    needs: build-docs
    runs-on: ubuntu-latest
    permissions:
      pages: write       # required
      id-token: write    # required
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4.0.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
