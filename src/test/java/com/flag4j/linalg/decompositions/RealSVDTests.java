package com.flag4j.linalg.decompositions;

import com.flag4j.Matrix;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class RealSVDTests {

    final SingularValueDecomposition<Matrix> svd = new RealSVD();

    double[][] aEntries, expSEntries, expUEntries, expVEntries;

    Matrix A, expS, expU, expV;

    @Test
    void svdTestCase() {
        // -------------------- Sub-case 1 --------------------
        aEntries = new double[][]{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        A = new Matrix(aEntries);

        expUEntries = new double[][]{
                {-0.21483723836839624, 0.8872306883463711, -7.052358140855896E-8},
                {-0.520587389464737, 0.24964395298829942, -1.2264970679749384E-8},
                {-0.8263375405610778, -0.3879427823697727, 4.905988271899754E-8}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {16.848103352614206, 0.0, 0.0},
                {0.0, 1.0683695145547087, 0.0},
                {0.0, 0.0, 7.241586163484199E-8}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.4796711778777717, -0.7766909903215571, 0.4082482904638673},
                {-0.5723677939720621, -0.07568647010456286, -0.8164965809277254},
                {-0.6650644100663529, 0.6253180501124451, 0.40824829046385946}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 2 --------------------
        aEntries = new double[][]{
                {3.45, -99.34, 14.5, 24.5},
                {-0.0024, 0, 25.1, 1.5},
                {100.4, 5.6, -4.1, -0.002}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.9281923021372457, 0.37000088071161463, 0.039476556660765605},
                {-0.04026943724457485, 0.005584143138528899, -0.9991732531295122},
                {0.36991542638441777, 0.9290146207773262, -0.009716568571038817}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {103.99805783777117, 0.0, 0.0, 0.0},
                {0.0, 100.10197909864624, 0.0, 0.0},
                {0.0, 0.0, 24.80777814045014, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {0.32632669031388184, 0.9445323500485516, -0.033737456998635985, -0.015209039937366706},
                {0.9065375992802965, -0.31521260516182353, -0.16027287490914854, 0.23052808984279566},
                {-0.15371637544368547, 0.016944867955476374, -0.9862632805045107, -0.05804213037879136},
                {-0.21925270397502242, 0.09062298112968545, -0.021427344494895306, 0.9712139805412124}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 3 --------------------
        aEntries = new double[][]{
                {34.5, 100.34},
                {-9.245, 0.13},
                {0, 1153.4},
                {14.5, -195.342}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.8938804065462356, 0.08547311955880336, 0.0, 0.0},
                {0.23985374041643295, 1.0712993718765093E-4, 0.0, 0.0},
                {0.013647949167424785, 0.9823523886528837, 0.0, 0.0},
                {-0.3784993203222594, -0.1663674212820429, 0.0, 0.0}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {38.5445660096562, 0.0},
                {0.0, 1174.1202987429047},
                {0.0, 0.0},
                {0.0, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.9999998959909222, 4.56090062060202E-4},
                {4.56090062060202E-4, 0.9999998959909222}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 4 --------------------
        // This Toeplitz matrix is known to be difficult to compute eigenvalues of. As such, it is a good test matrix.
        aEntries = new double[][]{
                {2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2},
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.08410500753645159, -0.1639926388027677, 0.23565699438616325, -0.29550452425305196, 0.34053422335445804, -0.3684881145497895, -0.3779644730092273, 0.36848811454978925, -0.3405342233544584, 0.2955045242530507, -0.23565699438616325, 0.16399263880284196, 0.0841050075363158},
                {-0.16399263880307896, -0.2955045242529096, 0.36848811454978836, -0.36848811454978936, 0.2955045242530514, -0.16399263880284115, 0.0, -0.1639926388028413, 0.29550452425305224, -0.36848811454979047, 0.36848811454978975, -0.29550452425305074, -0.1639926388028298},
                {-0.23565699438646062, -0.368488114549585, 0.3405342233544568, -0.163992638802841, -0.08410500753631955, 0.2955045242530518, 0.3779644730092271, -0.2955045242530517, 0.08410500753631908, 0.16399263880283993, -0.34053422335445666, 0.3684881145497921, 0.2356569943861578},
                {-0.29550452425334855, -0.36848811454953306, 0.1639926388028397, 0.1639926388028407, -0.3684881145497887, 0.2955045242530518, -3.6082248300317617E-16, 0.2955045242530527, -0.3684881145497894, 0.1639926388028401, 0.16399263880284226, -0.3684881145497943, -0.2955045242530612},
                {-0.34053422335469574, -0.29550452425275625, -0.08410500753632026, 0.3684881145497888, -0.2356569943861633, -0.16399263880284093, -0.3779644730092275, 0.16399263880284123, 0.23565699438616425, -0.36848811454978925, 0.08410500753632034, 0.29550452425305596, 0.340534223354469},
                {-0.3684881145499206, -0.16399263880252068, -0.29550452425305196, 0.2955045242530517, 0.16399263880284143, -0.3684881145497894, 2.220446049250315E-16, -0.3684881145497895, 0.16399263880284032, 0.29550452425305185, -0.29550452425305224, -0.16399263880284223, -0.3684881145498114},
                {-0.3779644730092262, 3.2848042540624355E-13, -0.3779644730092268, 4.78694794601015E-16, 0.3779644730092278, -6.356996396966256E-16, 0.3779644730092279, -2.1419670440929436E-16, -0.3779644730092278, -2.2115397473415896E-16, 0.3779644730092283, 2.8027121398834298E-15, 0.3779644730092783},
                {-0.36848811454965663, 0.16399263880316092, -0.29550452425305146, -0.29550452425305107, 0.16399263880284143, 0.3684881145497888, -5.551115123125788E-17, 0.36848811454978925, 0.1639926388028419, -0.29550452425305174, -0.2955045242530503, 0.16399263880283887, -0.3684881145498712},
                {-0.3405342233542203, 0.29550452425334756, -0.08410500753631987, -0.3684881145497888, -0.23565699438616344, 0.16399263880284146, -0.3779644730092284, -0.16399263880284123, 0.2356569943861648, 0.36848811454979, 0.08410500753631825, -0.295504524253053, 0.34053422335455646},
                {-0.29550452425275575, 0.36848811455004576, 0.16399263880284018, -0.16399263880284118, -0.36848811454978964, -0.295504524253051, -6.383782391594655E-16, -0.29550452425305235, -0.36848811454978864, -0.16399263880284065, 0.16399263880284182, 0.36848811454979036, -0.2955045242531508},
                {-0.2356569943858678, 0.3684881145499938, 0.34053422335445777, 0.16399263880284012, -0.0841050075363203, -0.29550452425305174, 0.3779644730092279, 0.29550452425305157, 0.08410500753631955, -0.1639926388028416, -0.34053422335445815, -0.36848811454978675, 0.235656994386227},
                {-0.16399263880260365, 0.29550452425319435, 0.3684881145497895, 0.36848811454978847, 0.2955045242530514, 0.1639926388028407, 7.494005416219813E-16, 0.16399263880284107, 0.2955045242530516, 0.36848811454979, 0.3684881145497872, 0.2955045242530456, -0.1639926388028752},
                {-0.08410500753618783, 0.1639926388029141, 0.2356569943861641, 0.2955045242530515, 0.34053422335445804, 0.36848811454978914, -0.3779644730092271, -0.3684881145497888, -0.34053422335445843, -0.29550452425305196, -0.23565699438616286, -0.16399263880283663, 0.08410500753633628}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {3.9498558243636506, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 3.801937735804836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 3.563662964936068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 3.24697960371747, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 2.8677674782351117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 2.4450418679126233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9999999999999984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5549581320873704, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1322325217648836, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7530203962825321, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4363370350639407, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19806226419516149, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.050144175636345475}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.08410500753645694, -0.1639926388027702, 0.23565699438616355, -0.29550452425305235, 0.34053422335445793, -0.36848811454978864, -0.3779644730092271, 0.36848811454978936, -0.3405342233544586, 0.2955045242530512, -0.23565699438616378, 0.1639926388028432, 0.08410500753631485},
                {-0.16399263880308812, -0.29550452425291457, 0.3684881145497897, -0.36848811454978947, 0.29550452425305046, -0.1639926388028408, 9.319988221933792E-17, -0.16399263880284137, 0.2955045242530526, -0.368488114549789, 0.36848811454978936, -0.29550452425305623, -0.16399263880283252},
                {-0.23565699438647267, -0.3684881145495928, 0.3405342233544573, -0.16399263880284132, -0.08410500753631925, 0.29550452425305135, 0.3779644730092269, -0.2955045242530515, 0.08410500753631886, 0.16399263880284057, -0.340534223354458, 0.368488114549796, 0.23565699438615334},
                {-0.29550452425336, -0.3684881145495421, 0.16399263880284023, 0.16399263880284118, -0.36848811454978814, 0.29550452425305096, -3.2514884339661376E-16, 0.2955045242530521, -0.36848811454978925, 0.16399263880284057, 0.16399263880284123, -0.36848811454979796, -0.29550452425304136},
                {-0.3405342233547057, -0.2955045242527675, -0.08410500753632048, 0.36848811454978886, -0.23565699438616317, -0.1639926388028404, -0.377964473009227, 0.1639926388028411, 0.23565699438616422, -0.3684881145497889, 0.08410500753631947, 0.2955045242530616, 0.34053422335444916},
                {-0.368488114549926, -0.16399263880253223, -0.2955045242530527, 0.29550452425305196, 0.16399263880284115, -0.36848811454978847, -1.0400886965925005E-16, -0.3684881145497894, 0.1639926388028406, 0.2955045242530519, -0.2955045242530518, -0.163992638802851, -0.368488114549784},
                {-0.37796447300922614, 3.1623840359855086E-13, -0.3779644730092276, 4.634758881885822E-16, 0.377964473009227, -4.736709884999718E-16, 0.37796447300922764, -4.868067754459915E-17, -0.37796447300922786, -6.29704621779581E-16, 0.377964473009227, 1.0158540675320182E-14, 0.37796447300922725},
                {-0.36848811454965175, 0.16399263880314863, -0.29550452425305196, -0.29550452425305135, 0.16399263880284104, 0.36848811454978786, 8.360554002578846E-17, 0.3684881145497892, 0.16399263880284184, -0.2955045242530508, -0.2955045242530506, 0.16399263880283124, -0.3684881145497945},
                {-0.3405342233542116, 0.29550452425333645, -0.0841050075363202, -0.368488114549789, -0.23565699438616294, 0.16399263880284104, -0.3779644730092279, -0.16399263880284107, 0.23565699438616358, 0.3684881145497881, 0.08410500753631793, -0.2955045242530431, 0.34053422335446726},
                {-0.2955045242527445, 0.36848811455003583, 0.16399263880284037, -0.16399263880284135, -0.368488114549789, -0.29550452425305035, -5.21569007601308E-16, -0.2955045242530519, -0.3684881145497886, -0.1639926388028394, 0.16399263880284226, 0.36848811454978125, -0.2955045242530626},
                {-0.23565699438585644, 0.36848811454998587, 0.34053422335445865, 0.16399263880284026, -0.08410500753632023, -0.29550452425305135, 0.3779644730092277, 0.29550452425305157, 0.08410500753631904, -0.1639926388028425, -0.3405342233544587, -0.3684881145497819, 0.23565699438617327},
                {-0.1639926388025946, 0.29550452425318885, 0.3684881145497906, 0.36848811454978886, 0.2955045242530511, 0.1639926388028404, 4.1965400338767056E-16, 0.16399263880284093, 0.2955045242530521, 0.36848811454979047, 0.3684881145497891, 0.2955045242530458, -0.16399263880284767},
                {-0.08410500753618282, 0.16399263880291132, 0.2356569943861647, 0.29550452425305185, 0.3405342233544576, 0.36848811454978836, -0.37796447300922703, -0.3684881145497888, -0.3405342233544584, -0.2955045242530524, -0.23565699438616355, -0.16399263880283746, 0.08410500753632294}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());
    }
}
