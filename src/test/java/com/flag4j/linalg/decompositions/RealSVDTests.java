package com.flag4j.linalg.decompositions;

import com.flag4j.Matrix;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class RealSVDTests {

    final SingularValueDecomposition<Matrix> svd = new RealSVD();

    double[][] aEntries, expSEntries, expUEntries, expVEntries;

    Matrix A, expS, expU, expV;

    @Test
    void svdTestCase() {
        // -------------------- Sub-case 1 --------------------
        aEntries = new double[][]{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        A = new Matrix(aEntries);

        expUEntries = new double[][]{
                {-0.21483723836839627, -0.8872306883463714, -8.060878704448943E-8},
                {-0.520587389464737, -0.2496439529882993, -2.388408505021909E-8},
                {-0.8263375405610779, 0.3879427823697723, 3.582612757532863E-8}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {16.848103352614206, 0.0, 0.0},
                {0.0, 1.0683695145547074, 0.0},
                {0.0, 0.0, 7.437407946192002E-8}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.4796711778777717, 0.7766909903215564, 0.4082482904638677},
                {-0.5723677939720622, 0.07568647010456324, -0.8164965809277254},
                {-0.6650644100663529, -0.6253180501124449, 0.4082482904638591}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 2 --------------------
        aEntries = new double[][]{
                {3.45, -99.34, 14.5, 24.5},
                {-0.0024, 0, 25.1, 1.5},
                {100.4, 5.6, -4.1, -0.002}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {0.9281923021372515, 0.3700008807115992, -0.03947655666076524},
                {0.040269437244575094, 0.005584143138528257, 0.9991732531295133},
                {-0.3699154263844032, 0.9290146207773318, 0.009716568571038722}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {103.9980578377715, 0.0, 0.0, 0.0},
                {0.0, 100.10197909864625, 0.0, 0.0},
                {0.0, 0.0, 24.80777814045011, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.3263266903138675, 0.9445323500485564, 0.03373745699863596, -0.015209039937366706},
                {-0.9065375992803044, -0.31521260516180905, 0.16027287490914857, 0.23052808984279555},
                {0.15371637544368685, 0.01694486795547403, 0.9862632805045107, -0.05804213037879165},
                {0.21925270397502436, 0.0906229811296819, 0.0214273444948958, 0.9712139805412126}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 3 --------------------
        aEntries = new double[][]{
                {34.5, 100.34},
                {-9.245, 0.13},
                {0, 1153.4},
                {14.5, -195.342}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {0.8938804065462775, 0.08547311955880336, 0.0, 0.0},
                {-0.2398537404164442, 1.0712993718765093E-4, 0.0, 0.0},
                {-0.013647949167425427, 0.9823523886528837, 0.0, 0.0},
                {0.3784993203222772, -0.1663674212820429, 0.0, 0.0}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {38.54456600965438, 0.0},
                {0.0, 1174.1202987429049},
                {0.0, 0.0},
                {0.0, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {0.999999895990922, 4.560900620602019E-4},
                {-4.560900620602019E-4, 0.9999998959909223}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 4 --------------------
        // This Toeplitz matrix is known to be difficult to compute eigenvalues of. As such, it is a good test matrix.
        aEntries = new double[][]{
                {2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2},
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.08410500753632057, 0.163992638802839, 0.23565699438616614, -0.29550452425305135, 0.34053422335445815, -0.36848811454978864, 0.3779644730092281, 0.3684881145497887, 0.3405342233544575, 0.2955045242530513, 0.2356569943861634, 0.16399263880284315, 0.08410500753632251},
                {-0.16399263880284293, 0.2955045242530479, 0.3684881145497927, -0.36848811454978797, 0.29550452425305196, -0.1639926388028405, 8.326672684688675E-17, -0.16399263880284132, -0.29550452425305196, -0.36848811454978825, -0.36848811454979, -0.295504524253058, -0.16399263880284815},
                {-0.23565699438616658, 0.3684881145497846, 0.340534223354461, -0.16399263880283965, -0.08410500753632001, 0.29550452425305135, -0.37796447300922803, -0.2955045242530512, -0.08410500753631857, 0.16399263880284085, 0.34053422335445793, 0.36848811454979236, 0.23565699438617108},
                {-0.2955045242530554, 0.36848811454978525, 0.16399263880284254, 0.16399263880284115, -0.3684881145497902, 0.2955045242530514, -5.551115123125784E-17, 0.2955045242530522, 0.3684881145497888, 0.16399263880284018, -0.1639926388028396, -0.3684881145497965, -0.2955045242530686},
                {-0.34053422335446165, 0.295504524253049, -0.08410500753631926, 0.36848811454978836, -0.23565699438616403, -0.1639926388028404, 0.37796447300922775, 0.16399263880283976, -0.2356569943861646, -0.3684881145497887, -0.08410500753632019, 0.2955045242530548, 0.3405342233544782},
                {-0.3684881145497915, 0.16399263880283949, -0.2955045242530519, 0.29550452425305035, 0.163992638802842, -0.3684881145497887, -1.9428902930940242E-16, -0.3684881145497897, -0.16399263880284004, 0.2955045242530517, 0.2955045242530524, -0.1639926388028417, -0.3684881145498099},
                {-0.37796447300922725, -8.103417539747311E-16, -0.3779644730092267, -2.1883190610332135E-15, 0.37796447300922853, -2.0433202704534353E-16, -0.3779644730092281, 7.853879161674125E-16, 0.3779644730092279, -2.2115397473415876E-16, -0.3779644730092281, -1.4013560699417203E-16, 0.3779644730092847},
                {-0.36848811454978697, -0.16399263880284207, -0.29550452425305157, -0.295504524253054, 0.16399263880284137, 0.3684881145497892, -7.771561172376097E-16, 0.3684881145497889, -0.1639926388028412, -0.2955045242530514, 0.2955045242530518, 0.16399263880284173, -0.3684881145498719},
                {-0.3405342233544546, -0.29550452425305396, -0.08410500753632064, -0.3684881145497908, -0.2356569943861638, 0.16399263880284146, 0.37796447300922686, -0.16399263880284173, -0.2356569943861634, 0.36848811454978964, -0.08410500753631751, -0.2955045242530541, 0.3405342233545568},
                {-0.2955045242530484, -0.36848811454979297, 0.16399263880283868, -0.16399263880284173, -0.36848811454978947, -0.295504524253052, 3.6082248300317592E-16, -0.29550452425305196, 0.36848811454978947, -0.16399263880284085, -0.16399263880284265, 0.3684881145497901, -0.2955045242531483},
                {-0.23565699438616103, -0.3684881145497944, 0.34053422335445555, 0.16399263880284085, -0.08410500753631969, -0.29550452425305274, -0.37796447300922664, 0.2955045242530513, -0.0841050075363198, -0.1639926388028416, 0.34053422335445865, -0.3684881145497876, 0.23565699438622753},
                {-0.16399263880283904, -0.2955045242530566, 0.36848811454978697, 0.3684881145497897, 0.2955045242530519, 0.1639926388028409, 2.775557561562892E-17, 0.16399263880284065, -0.29550452425305185, 0.3684881145497898, -0.36848811454978786, 0.29550452425304474, -0.16399263880287776},
                {-0.08410500753631851, -0.16399263880284376, 0.23565699438616236, 0.2955045242530523, 0.3405342233544582, 0.36848811454978997, 0.37796447300922675, -0.36848811454978847, 0.34053422335445865, -0.2955045242530516, 0.235656994386163, -0.16399263880283585, 0.08410500753633635}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {3.9498558243636417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 3.8019377358048367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 3.5636629649360576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 3.2469796037174663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 2.8677674782351112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 2.4450418679126282, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5549581320873707, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1322325217648839, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7530203962825328, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4363370350639402, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19806226419516074, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.050144175636344775}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.08410500753632048, 0.16399263880283932, 0.23565699438616594, -0.29550452425305146, 0.3405342233544574, -0.3684881145497887, 0.37796447300922803, 0.36848811454978897, 0.34053422335445804, 0.2955045242530511, 0.2356569943861634, 0.16399263880284357, 0.08410500753631599},
                {-0.16399263880284276, 0.2955045242530475, 0.3684881145497928, -0.36848811454978814, 0.2955045242530518, -0.16399263880284032, 5.0185008058922786E-17, -0.1639926388028414, -0.29550452425305246, -0.36848811454978825, -0.36848811454978864, -0.29550452425305684, -0.16399263880283452},
                {-0.23565699438616614, 0.36848811454978414, 0.3405342233544605, -0.16399263880283932, -0.08410500753631991, 0.29550452425305124, -0.377964473009228, -0.2955045242530512, -0.08410500753631842, 0.16399263880284046, 0.34053422335445693, 0.3684881145497957, 0.23565699438615537},
                {-0.295504524253055, 0.3684881145497855, 0.16399263880284248, 0.16399263880284093, -0.3684881145497894, 0.2955045242530511, -1.0528619534370953E-17, 0.29550452425305224, 0.36848811454978875, 0.16399263880284082, -0.16399263880283946, -0.3684881145497969, -0.29550452425304297},
                {-0.3405342233544617, 0.29550452425304863, -0.08410500753631965, 0.3684881145497883, -0.23565699438616394, -0.16399263880284018, 0.37796447300922786, 0.1639926388028399, -0.23565699438616428, -0.3684881145497891, -0.08410500753632072, 0.2955045242530597, 0.34053422335445016},
                {-0.36848811454979125, 0.16399263880283987, -0.2955045242530521, 0.2955045242530508, 0.16399263880284193, -0.36848811454978864, -2.889331027038089E-16, -0.36848811454978947, -0.16399263880284043, 0.29550452425305207, 0.29550452425305257, -0.16399263880284862, -0.36848811454978414},
                {-0.3779644730092266, -4.94099993819647E-16, -0.37796447300922614, -2.113348897465374E-15, 0.37796447300922775, -4.509705055135566E-16, -0.3779644730092277, 1.0069527676959122E-15, 0.3779644730092278, -7.572067972638763E-16, -0.37796447300922736, 7.555005340949272E-15, 0.3779644730092269},
                {-0.36848811454978614, -0.16399263880284196, -0.29550452425305096, -0.2955045242530537, 0.16399263880284073, 0.368488114549789, -3.3345993067507296E-16, 0.3684881145497887, -0.1639926388028417, -0.29550452425305074, 0.2955045242530509, 0.1639926388028335, -0.36848811454979363},
                {-0.3405342233544539, -0.29550452425305335, -0.08410500753632075, -0.3684881145497903, -0.23565699438616336, 0.16399263880284157, 0.3779644730092268, -0.1639926388028415, -0.23565699438616303, 0.36848811454978814, -0.08410500753631761, -0.2955045242530445, 0.34053422335446604},
                {-0.29550452425304785, -0.3684881145497927, 0.16399263880283857, -0.16399263880284162, -0.36848811454978875, -0.2955045242530518, 3.378238444193271E-16, -0.2955045242530513, 0.3684881145497889, -0.1639926388028396, -0.16399263880284282, 0.36848811454978186, -0.2955045242530613},
                {-0.2356569943861607, -0.3684881145497945, 0.34053422335445566, 0.16399263880284087, -0.08410500753631962, -0.29550452425305285, -0.37796447300922675, 0.2955045242530513, -0.08410500753631928, -0.16399263880284243, 0.3405342233544592, -0.36848811454978203, 0.23565699438617216},
                {-0.16399263880283885, -0.29550452425305673, 0.36848811454978686, 0.3684881145497897, 0.29550452425305146, 0.16399263880284098, 4.6918849014310204E-17, 0.16399263880284048, -0.2955045242530523, 0.3684881145497904, -0.36848811454978947, 0.2955045242530455, -0.16399263880284692},
                {-0.08410500753631839, -0.16399263880284376, 0.23565699438616217, 0.29550452425305224, 0.34053422335445765, 0.36848811454978997, 0.3779644730092267, -0.3684881145497883, 0.3405342233544586, -0.29550452425305235, 0.23565699438616372, -0.16399263880283718, 0.08410500753632254}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());
    }
}
