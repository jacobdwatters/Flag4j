package com.flag4j.linalg.decompositions;

import com.flag4j.Matrix;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class RealSVDTests {

    final SingularValueDecomposition<Matrix> svd = new RealSVD();

    double[][] aEntries, expSEntries, expUEntries, expVEntries;

    Matrix A, expS, expU, expV;

    @Test
    void svdTestCase() {
        // -------------------- Sub-case 1 --------------------
        aEntries = new double[][]{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        A = new Matrix(aEntries);

        expUEntries = new double[][]{
                {-0.21483723836839624, 0.8872306883463722, 4.3486798128278985E-7},
                {-0.520587389464737, 0.2496439529882979, 1.3380553270239688E-7},
                {-0.8263375405610778, -0.3879427823697761, -6.690276635119844E-8}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {16.848103352614206, 0.0, 0.0},
                {0.0, 1.0683695145547063, 0.0},
                {0.0, 0.0, 6.637830303142728E-9}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.4796711778777717, -0.7766909903215606, 0.4082482904638607},
                {-0.5723677939720621, -0.07568647010455593, -0.816496580927726},
                {-0.6650644100663529, 0.6253180501124413, 0.40824829046386474}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 2 --------------------
        aEntries = new double[][]{
                {3.45, -99.34, 14.5, 24.5},
                {-0.0024, 0, 25.1, 1.5},
                {100.4, 5.6, -4.1, -0.002}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.9281923021372457, 0.3700008807116149, 0.03947655666076548},
                {-0.04026943724457484, 0.005584143138528899, -0.9991732531295128},
                {0.36991542638441793, 0.9290146207773262, -0.009716568571038788}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {103.99805783777116, 0.0, 0.0, 0.0},
                {0.0, 100.10197909864624, 0.0, 0.0},
                {0.0, 0.0, 24.807778140450125, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {0.32632669031388206, 0.9445323500485516, -0.03373745699863598, -0.015209039937366702},
                {0.9065375992802964, -0.31521260516182376, -0.16027287490914857, 0.23052808984279557},
                {-0.15371637544368538, 0.016944867955476367, -0.9862632805045107, -0.05804213037879141},
                {-0.21925270397502236, 0.09062298112968553, -0.02142734449489553, 0.9712139805412126}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 3 --------------------
        aEntries = new double[][]{
                {34.5, 100.34},
                {-9.245, 0.13},
                {0, 1153.4},
                {14.5, -195.342}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.8938804065462356, 0.08547311955880336, 0.0, 0.0},
                {0.23985374041643295, 1.0712993718765093E-4, 0.0, 0.0},
                {0.013647949167424785, 0.9823523886528837, 0.0, 0.0},
                {-0.3784993203222594, -0.1663674212820429, 0.0, 0.0}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {38.5445660096562, 0.0},
                {0.0, 1174.1202987429047},
                {0.0, 0.0},
                {0.0, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.9999998959909222, 4.56090062060202E-4},
                {4.56090062060202E-4, 0.9999998959909222}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 4 --------------------
        // This Toeplitz matrix is known to be difficult to compute eigenvalues of. As such, it is a good test matrix.
        aEntries = new double[][]{
                {2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2},
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.08410500753645138, -0.16399263880276851, 0.2356569943861631, -0.29550452425305174, 0.3405342233544584, -0.3684881145497892, -0.37796447300922675, 0.3684881145497894, -0.340534223354459, 0.295504524253051, -0.23565699438616391, 0.16399263880284298, 0.08410500753631148},
                {-0.16399263880307885, -0.2955045242529107, 0.3684881145497878, -0.3684881145497892, 0.29550452425305174, -0.16399263880284037, 1.665334536937734E-16, -0.1639926388028411, 0.2955045242530519, -0.36848811454978986, 0.3684881145497891, -0.29550452425305224, -0.1639926388028268},
                {-0.23565699438646054, -0.36848811454958585, 0.3405342233544559, -0.16399263880284085, -0.08410500753631997, 0.29550452425305185, 0.3779644730092267, -0.29550452425305174, 0.08410500753631903, 0.16399263880283987, -0.3405342233544578, 0.36848811454979186, 0.2356569943861419},
                {-0.29550452425334833, -0.36848811454953306, 0.16399263880283868, 0.16399263880284104, -0.36848811454978936, 0.29550452425305074, -5.551115123125781E-16, 0.2955045242530526, -0.3684881145497896, 0.16399263880283993, 0.16399263880284182, -0.3684881145497927, -0.2955045242530427},
                {-0.34053422335469563, -0.29550452425275575, -0.08410500753632165, 0.3684881145497891, -0.23565699438616292, -0.16399263880284162, -0.377964473009227, 0.16399263880284146, 0.23565699438616416, -0.36848811454978914, 0.08410500753632079, 0.2955045242530562, 0.34053422335445155},
                {-0.3684881145499207, -0.16399263880251996, -0.2955045242530533, 0.29550452425305146, 0.16399263880284207, -0.3684881145497887, 6.661338147750936E-16, -0.3684881145497899, 0.16399263880284046, 0.2955045242530523, -0.2955045242530521, -0.16399263880284257, -0.3684881145497999},
                {-0.37796447300922653, 3.2950977844507634E-13, -0.37796447300922725, -4.615985519366931E-16, 0.3779644730092274, 3.8596049553009414E-16, 0.3779644730092276, -5.354917610232361E-16, -0.37796447300922775, 7.3717991578053E-17, 0.3779644730092283, 3.923796995836799E-15, 0.3779644730092743},
                {-0.368488114549657, 0.16399263880316234, -0.2955045242530503, -0.29550452425305185, 0.16399263880284054, 0.3684881145497885, -5.551115123125781E-16, 0.3684881145497897, 0.16399263880284162, -0.29550452425305235, -0.29550452425305124, 0.16399263880283907, -0.36848811454986413},
                {-0.3405342233542205, 0.29550452425334867, -0.08410500753631735, -0.3684881145497883, -0.23565699438616322, 0.1639926388028403, -0.3779644730092284, -0.16399263880284087, 0.23565699438616514, 0.3684881145497896, 0.08410500753631786, -0.29550452425305224, 0.34053422335455674},
                {-0.29550452425275553, 0.3684881145500457, 0.1639926388028429, -0.16399263880283965, -0.3684881145497882, -0.29550452425305196, -3.6082248300317573E-16, -0.29550452425305285, -0.36848811454978814, -0.16399263880284062, 0.16399263880284257, 0.3684881145497879, -0.2955045242531456},
                {-0.2356569943858671, 0.36848811454999253, 0.34053422335445954, 0.1639926388028415, -0.08410500753631903, -0.2955045242530516, 0.37796447300922803, 0.29550452425305146, 0.08410500753631943, -0.16399263880284184, -0.3405342233544584, -0.3684881145497868, 0.23565699438623214},
                {-0.16399263880260279, 0.29550452425319246, 0.3684881145497901, 0.368488114549789, 0.29550452425305157, 0.1639926388028416, 8.604228440844959E-16, 0.1639926388028416, 0.2955045242530518, 0.3684881145497894, 0.3684881145497867, 0.29550452425304524, -0.1639926388028733},
                {-0.08410500753618724, 0.1639926388029128, 0.23565699438616408, 0.29550452425305157, 0.34053422335445765, 0.36848811454978997, -0.37796447300922686, -0.3684881145497887, -0.340534223354458, -0.29550452425305257, -0.23565699438616314, -0.1639926388028371, 0.08410500753633637}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {3.949855824363651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 3.801937735804836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 3.563662964936066, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 3.246979603717469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 2.8677674782351117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 2.4450418679126233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.000000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5549581320873698, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1322325217648836, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7530203962825319, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.43633703506394045, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1980622641951616, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05014417563634674}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.08410500753645656, -0.16399263880277107, 0.23565699438616358, -0.29550452425305185, 0.34053422335445815, -0.3684881145497887, -0.37796447300922703, 0.36848811454978914, -0.34053422335445893, 0.295504524253051, -0.2356569943861639, 0.16399263880284382, 0.08410500753631416},
                {-0.1639926388030881, -0.2955045242529159, 0.36848811454978875, -0.36848811454978947, 0.29550452425305107, -0.1639926388028399, 1.7266681926484187E-16, -0.163992638802841, 0.2955045242530526, -0.36848811454978847, 0.36848811454978936, -0.29550452425305723, -0.16399263880283124},
                {-0.23565699438647272, -0.3684881145495936, 0.3405342233544564, -0.16399263880284107, -0.08410500753631973, 0.29550452425305146, 0.37796447300922703, -0.2955045242530516, 0.08410500753631882, 0.16399263880284012, -0.34053422335445815, 0.3684881145497971, 0.2356569943861514},
                {-0.2955045242533598, -0.3684881145495421, 0.1639926388028394, 0.16399263880284132, -0.36848811454978897, 0.29550452425305, -5.772258484994935E-16, 0.295504524253052, -0.36848811454978925, 0.16399263880284082, 0.16399263880284115, -0.3684881145497991, -0.2955045242530393},
                {-0.3405342233547055, -0.2955045242527668, -0.08410500753632182, 0.36848811454978925, -0.23565699438616264, -0.1639926388028412, -0.377964473009227, 0.1639926388028412, 0.23565699438616414, -0.3684881145497891, 0.08410500753631957, 0.29550452425306306, 0.34053422335444755},
                {-0.3684881145499262, -0.16399263880253162, -0.29550452425305396, 0.29550452425305174, 0.163992638802842, -0.36848811454978764, 2.463442861158627E-16, -0.3684881145497894, 0.16399263880284065, 0.29550452425305207, -0.29550452425305174, -0.1639926388028527, -0.36848811454978325},
                {-0.3779644730092264, 3.1710006131079334E-13, -0.3779644730092279, -5.070417572811863E-16, 0.37796447300922653, 4.9024572921184395E-16, 0.3779644730092278, -4.1405680967221414E-16, -0.3779644730092277, -5.542441505745899E-16, 0.37796447300922686, 1.201816424156732E-14, 0.37796447300922753},
                {-0.3684881145496523, 0.1639926388031502, -0.2955045242530506, -0.29550452425305224, 0.1639926388028399, 0.3684881145497876, -3.2569433261464553E-16, 0.3684881145497894, 0.16399263880284148, -0.2955045242530509, -0.29550452425305057, 0.16399263880282944, -0.3684881145497955},
                {-0.34053422335421185, 0.29550452425333773, -0.08410500753631765, -0.36848811454978847, -0.2356569943861628, 0.16399263880284007, -0.37796447300922825, -0.16399263880284062, 0.2356569943861638, 0.3684881145497878, 0.08410500753631762, -0.29550452425304125, 0.34053422335446887},
                {-0.2955045242527443, 0.3684881145500359, 0.16399263880284307, -0.1639926388028397, -0.3684881145497875, -0.295504524253051, -3.0578567022238046E-16, -0.29550452425305235, -0.3684881145497883, -0.16399263880283918, 0.16399263880284262, 0.3684881145497795, -0.2955045242530644},
                {-0.2356569943858557, 0.36848811454998437, 0.34053422335446004, 0.16399263880284148, -0.0841050075363191, -0.29550452425305124, 0.37796447300922814, 0.2955045242530514, 0.08410500753631883, -0.16399263880284262, -0.3405342233544588, -0.36848811454978064, 0.2356569943861751},
                {-0.16399263880259363, 0.2955045242531868, 0.36848811454979064, 0.36848811454978914, 0.295504524253051, 0.1639926388028411, 4.1514101184469965E-16, 0.16399263880284132, 0.2955045242530521, 0.3684881145497903, 0.36848811454978897, 0.29550452425304496, -0.163992638802849},
                {-0.08410500753618215, 0.16399263880290985, 0.23565699438616436, 0.2955045242530517, 0.34053422335445716, 0.368488114549789, -0.37796447300922725, -0.36848811454978875, -0.3405342233544581, -0.2955045242530525, -0.23565699438616353, -0.1639926388028371, 0.08410500753632366}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());
    }
}
