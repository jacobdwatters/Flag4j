package com.flag4j.linalg.decompositions;

import com.flag4j.Matrix;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class RealSVDTests {

    final SingularValueDecomposition<Matrix> svd = new RealSVD();

    double[][] aEntries, expSEntries, expUEntries, expVEntries;

    Matrix A, expS, expU, expV;

    @Test
    void svdTestCase() {
        // -------------------- Sub-case 1 --------------------
        aEntries = new double[][]{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        A = new Matrix(aEntries);

        expUEntries = new double[][]{
                {-0.21483723836839624, 0.8872306883463726, 5.568935484260996E-7},
                {-0.520587389464737, 0.24964395298829872, 1.8563118280869986E-7},
                {-0.8263375405610778, -0.38794278236977525, -2.784467742130498E-7}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {16.848103352614206, 0.0, 0.0},
                {0.0, 1.0683695145547063, 0.0},
                {0.0, 0.0, 4.784640200323604E-9}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.4796711778777717, -0.7766909903215606, 0.4082482904638607},
                {-0.5723677939720621, -0.07568647010455593, -0.8164965809277261},
                {-0.6650644100663529, 0.6253180501124415, 0.40824829046386474}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 2 --------------------
        aEntries = new double[][]{
                {3.45, -99.34, 14.5, 24.5},
                {-0.0024, 0, 25.1, 1.5},
                {100.4, 5.6, -4.1, -0.002}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.9281923021372458, 0.37000088071161463, 0.03947655666076556},
                {-0.040269437244574845, 0.005584143138528899, -0.999173253129513},
                {0.36991542638441777, 0.9290146207773262, -0.009716568571038788}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {103.99805783777117, 0.0, 0.0, 0.0},
                {0.0, 100.10197909864624, 0.0, 0.0},
                {0.0, 0.0, 24.807778140450125, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {0.32632669031388184, 0.9445323500485516, -0.03373745699863599, -0.015209039937366687},
                {0.9065375992802966, -0.31521260516182353, -0.1602728749091485, 0.2305280898427957},
                {-0.15371637544368544, 0.01694486795547637, -0.9862632805045108, -0.05804213037879091},
                {-0.2192527039750224, 0.09062298112968545, -0.021427344494895084, 0.9712139805412127}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 3 --------------------
        aEntries = new double[][]{
                {34.5, 100.34},
                {-9.245, 0.13},
                {0, 1153.4},
                {14.5, -195.342}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.8938804065462356, 0.08547311955880336, 0.0, 0.0},
                {0.23985374041643295, 1.0712993718765093E-4, 0.0, 0.0},
                {0.013647949167424785, 0.9823523886528837, 0.0, 0.0},
                {-0.3784993203222594, -0.1663674212820429, 0.0, 0.0}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {38.5445660096562, 0.0},
                {0.0, 1174.1202987429047},
                {0.0, 0.0},
                {0.0, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.9999998959909222, 4.56090062060202E-4},
                {4.56090062060202E-4, 0.9999998959909222}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 4 --------------------
        // This Toeplitz matrix is known to be difficult to compute eigenvalues of. As such, it is a good test matrix.
        aEntries = new double[][]{
                {2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2},
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.08410500753645145, -0.16399263880276768, 0.23565699438616375, -0.29550452425305135, 0.3405342233544588, -0.3684881145497884, -0.37796447300922786, 0.36848811454978897, -0.34053422335445827, 0.29550452425305096, -0.2356569943861631, 0.1639926388028424, 0.08410500753631064},
                {-0.16399263880307874, -0.29550452425290946, 0.3684881145497888, -0.3684881145497888, 0.29550452425305196, -0.1639926388028407, 0.0, -0.1639926388028413, 0.29550452425305196, -0.3684881145497902, 0.3684881145497889, -0.29550452425305085, -0.16399263880282677},
                {-0.23565699438646007, -0.36848811454958513, 0.3405342233544567, -0.16399263880284085, -0.0841050075363199, 0.295504524253051, 0.3779644730092275, -0.2955045242530516, 0.08410500753631889, 0.1639926388028402, -0.34053422335445754, 0.3684881145497921, 0.2356569943861427},
                {-0.2955045242533478, -0.3684881145495333, 0.16399263880283935, 0.1639926388028407, -0.3684881145497893, 0.29550452425305135, -2.7755575615628904E-16, 0.29550452425305246, -0.3684881145497892, 0.1639926388028401, 0.16399263880284154, -0.36848811454979347, -0.29550452425304696},
                {-0.3405342233546952, -0.29550452425275653, -0.08410500753632075, 0.3684881145497886, -0.23565699438616325, -0.16399263880284065, -0.3779644730092275, 0.16399263880284098, 0.23565699438616436, -0.36848811454978925, 0.08410500753631898, 0.29550452425305684, 0.3405342233544571},
                {-0.3684881145499205, -0.1639926388025209, -0.2955045242530524, 0.2955045242530514, 0.16399263880284146, -0.36848811454978925, 5.55111512312578E-17, -0.36848811454978964, 0.16399263880284032, 0.2955045242530524, -0.29550452425305285, -0.16399263880284212, -0.3684881145497967},
                {-0.3779644730092263, 3.280497032126894E-13, -0.3779644730092271, 3.761173386150832E-16, 0.3779644730092274, -5.902925225754382E-16, 0.37796447300922764, -3.569945073488239E-17, -0.37796447300922764, -7.371799157805298E-17, 0.37796447300922814, 3.0829833538717708E-15, 0.3779644730092745},
                {-0.3684881145496567, 0.1639926388031603, -0.2955045242530513, -0.295504524253051, 0.16399263880284115, 0.368488114549789, 4.163336342344335E-16, 0.36848811454978914, 0.16399263880284198, -0.2955045242530522, -0.2955045242530509, 0.1639926388028385, -0.36848811454986863},
                {-0.34053422335422057, 0.29550452425334695, -0.08410500753631935, -0.36848811454978864, -0.23565699438616317, 0.16399263880284135, -0.3779644730092276, -0.16399263880284146, 0.23565699438616505, 0.36848811454978964, 0.08410500753631873, -0.29550452425305307, 0.34053422335455563},
                {-0.29550452425275614, 0.3684881145500453, 0.16399263880284062, -0.1639926388028408, -0.36848811454978897, -0.2955045242530516, -9.436895709313827E-16, -0.29550452425305207, -0.3684881145497888, -0.16399263880284068, 0.1639926388028428, 0.36848811454978786, -0.2955045242531455},
                {-0.23565699438586815, 0.3684881145499935, 0.34053422335445777, 0.16399263880284093, -0.08410500753632023, -0.29550452425305207, 0.377964473009227, 0.2955045242530522, 0.08410500753631911, -0.1639926388028418, -0.34053422335445893, -0.36848811454978647, 0.23565699438623125},
                {-0.1639926388026039, 0.295504524253194, 0.3684881145497891, 0.3684881145497894, 0.2955045242530505, 0.1639926388028412, 1.1102230246251561E-15, 0.1639926388028411, 0.2955045242530518, 0.3684881145497897, 0.3684881145497865, 0.2955045242530449, -0.1639926388028741},
                {-0.08410500753618792, 0.16399263880291387, 0.23565699438616372, 0.295504524253052, 0.34053422335445704, 0.36848811454978986, -0.37796447300922564, -0.36848811454978947, -0.34053422335445815, -0.295504524253052, -0.23565699438616325, -0.16399263880283765, 0.08410500753633555}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {3.949855824363651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 3.8019377358048363, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 3.563662964936068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 3.2469796037174694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 2.867767478235112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 2.445041867912623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.000000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5549581320873704, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1322325217648836, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7530203962825323, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4363370350639405, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19806226419516162, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05014417563634657}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.0841050075364567, -0.16399263880277024, 0.23565699438616425, -0.2955045242530514, 0.3405342233544589, -0.36848811454978747, -0.37796447300922814, 0.368488114549789, -0.3405342233544585, 0.29550452425305135, -0.23565699438616358, 0.16399263880284362, 0.08410500753631418},
                {-0.16399263880308812, -0.2955045242529144, 0.3684881145497901, -0.36848811454978914, 0.295504524253051, -0.1639926388028403, 2.061381732085428E-16, -0.16399263880284118, 0.29550452425305257, -0.3684881145497891, 0.3684881145497891, -0.29550452425305695, -0.16399263880283135},
                {-0.23565699438647217, -0.3684881145495929, 0.34053422335445727, -0.16399263880284107, -0.08410500753631972, 0.2955045242530503, 0.37796447300922775, -0.29550452425305157, 0.08410500753631862, 0.16399263880284065, -0.340534223354458, 0.36848811454979696, 0.23565699438615165},
                {-0.29550452425335916, -0.36848811454954256, 0.16399263880283993, 0.16399263880284107, -0.3684881145497888, 0.2955045242530506, -4.614669377959318E-16, 0.2955045242530521, -0.36848811454978897, 0.16399263880284068, 0.1639926388028412, -0.3684881145497991, -0.29550452425303964},
                {-0.34053422335470507, -0.2955045242527678, -0.084105007536321, 0.36848811454978875, -0.23565699438616294, -0.16399263880283993, -0.37796447300922736, 0.16399263880284082, 0.23565699438616416, -0.3684881145497892, 0.08410500753631918, 0.295504524253063, 0.34053422335444783},
                {-0.36848811454992597, -0.16399263880253237, -0.29550452425305307, 0.2955045242530515, 0.16399263880284126, -0.36848811454978836, -9.897410582077049E-17, -0.36848811454978936, 0.16399263880284054, 0.2955045242530523, -0.29550452425305174, -0.16399263880285245, -0.36848811454978325},
                {-0.3779644730092263, 3.1580886069726224E-13, -0.3779644730092278, 4.1464041537287236E-16, 0.37796447300922664, -6.229995089691159E-16, 0.3779644730092277, 1.2419535885821453E-16, -0.37796447300922764, -7.086345399365257E-16, 0.37796447300922686, 1.1657341758564144E-14, 0.3779644730092275},
                {-0.36848811454965186, 0.163992638803148, -0.29550452425305174, -0.2955045242530511, 0.16399263880284076, 0.36848811454978814, 3.6969938829040094E-16, 0.3684881145497891, 0.16399263880284165, -0.2955045242530509, -0.2955045242530506, 0.16399263880282974, -0.36848811454979546},
                {-0.3405342233542118, 0.29550452425333584, -0.08410500753631964, -0.3684881145497891, -0.23565699438616278, 0.16399263880284107, -0.3779644730092276, -0.1639926388028412, 0.23565699438616383, 0.36848811454978797, 0.08410500753631786, -0.29550452425304163, 0.34053422335446865},
                {-0.29550452425274487, 0.36848811455003555, 0.16399263880284087, -0.163992638802841, -0.3684881145497883, -0.2955045242530509, -7.198560324217507E-16, -0.29550452425305185, -0.36848811454978864, -0.16399263880283932, 0.1639926388028426, 0.36848811454977975, -0.2955045242530641},
                {-0.23565699438585688, 0.3684881145499856, 0.3405342233544586, 0.16399263880284096, -0.08410500753632008, -0.2955045242530516, 0.37796447300922714, 0.29550452425305196, 0.08410500753631871, -0.1639926388028426, -0.34053422335445893, -0.3684881145497808, 0.23565699438617482},
                {-0.16399263880259482, 0.2955045242531885, 0.36848811454979, 0.36848811454978964, 0.2955045242530503, 0.16399263880284082, 6.213020549428183E-16, 0.16399263880284098, 0.29550452425305235, 0.3684881145497904, 0.368488114549789, 0.2955045242530451, -0.1639926388028488},
                {-0.0841050075361829, 0.16399263880291107, 0.23565699438616422, 0.2955045242530523, 0.3405342233544567, 0.36848811454978897, -0.37796447300922614, -0.3684881145497893, -0.3405342233544583, -0.2955045242530524, -0.23565699438616358, -0.1639926388028372, 0.08410500753632354}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());
    }
}
