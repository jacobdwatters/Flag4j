package com.flag4j.linalg.decompositions;

import com.flag4j.Matrix;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class RealSVDTests {

    final SVD<Matrix> svd = new RealSVD(true);

    double[][] aEntries, expSEntries, expUEntries, expVEntries;

    Matrix A, expS, expU, expV;

    @Test
    void svdTestCase() {
        // -------------------- Sub-case 1 --------------------
        aEntries = new double[][]{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        A = new Matrix(aEntries);

        expUEntries = new double[][]{
                {0.21483723836839624, 0.8872306883463706, -0.4082482904638626},
                {0.520587389464737, 0.24964395298829764, 0.8164965809277261},
                {0.8263375405610778, -0.3879427823697744, -0.40824829046386324}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {16.848103352614167, 0.0, 0.0},
                {0.0, 1.0683695145547083, 0.0},
                {0.0, 0.0, 1.1023900701150984E-16}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {0.4796711778777717, -0.7766909903215589, -0.40824829046386213},
                {0.5723677939720622, -0.07568647010455855, 0.8164965809277265},
                {0.665064410066353, 0.6253180501124429, -0.4082482904638633}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 2 --------------------
        aEntries = new double[][]{
                {3.45, -99.34, 14.5, 24.5},
                {-0.0024, 0, 25.1, 1.5},
                {100.4, 5.6, -4.1, -0.002}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {0.9281923021372602, 0.37000088071157566, -0.039476556660765744},
                {0.04026943724457502, 0.005584143138527557, 0.999173253129513},
                {-0.3699154263843809, 0.929014620777341, 0.009716568571038737}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {103.99805783777578, 0.0, 0.0},
                {0.0, 100.10197909864767, 0.0},
                {0.0, 0.0, 24.807778140450104}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.3263266903138418, 0.944532350048563, 0.033737456998635944},
                {-0.9065375992803105, -0.3152126051617874, 0.16027287490914893},
                {0.15371637544368774, 0.016944867955470334, 0.9862632805045103},
                {0.21925270397502603, 0.09062298112967668, 0.021427344494895615}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 3 --------------------
        aEntries = new double[][]{
                {34.5, 100.34},
                {-9.245, 0.13},
                {0, 1153.4},
                {14.5, -195.342}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {0.08547311955880307, 0.8938804065462778},
                {1.0712993718750231E-4, -0.2398537404164441},
                {0.9823523886528838, -0.013647949167425498},
                {-0.16636742128204293, 0.3784993203222771}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {1174.1202987429022, 0.0},
                {0.0, 38.544566009654424}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {4.560900620600983E-4, 0.9999998959909222},
                {0.9999998959909222, -4.560900620602084E-4}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 4 --------------------
        // This Toeplitz matrix is known to be difficult to compute eigenvalues of. As such, it is a good test matrix.
        aEntries = new double[][]{
                {2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2},
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.08410500753631436, 0.16399263880284326, -0.23565699438616278, -0.29550452425305573, 0.34053422335445604, -0.3684881145497888, 0.37796447300922764, 0.36848811454978875, -0.34053422335445804, -0.29550452425305196, -0.23565699438616358, 0.16399263880284062, -0.08410500753631953},
                {-0.16399263880283407, 0.2955045242530557, -0.3684881145497886, -0.3684881145497918, 0.2955045242530492, -0.1639926388028401, -6.044720893828091E-16, -0.16399263880284026, 0.29550452425305174, 0.36848811454978936, 0.36848811454978925, -0.29550452425305146, 0.16399263880284112},
                {-0.2356569943861568, 0.3684881145497946, -0.34053422335445716, -0.16399263880283996, -0.08410500753632064, 0.2955045242530516, -0.3779644730092273, -0.2955045242530517, 0.0841050075363198, -0.16399263880284096, -0.3405342233544578, 0.3684881145497885, -0.23565699438616408},
                {-0.2955045242530451, 0.36848811454979424, -0.1639926388028403, 0.1639926388028441, -0.36848811454978736, 0.2955045242530509, -1.4339606125130738E-16, 0.295504524253051, -0.3684881145497897, -0.16399263880284093, 0.16399263880284093, -0.3684881145497887, 0.29550452425305207},
                {-0.3405342233544532, 0.29550452425305734, 0.08410500753631951, 0.3684881145497903, -0.23565699438616028, -0.16399263880284132, 0.37796447300922775, 0.1639926388028415, 0.23565699438616372, 0.36848811454978914, 0.08410500753631922, 0.2955045242530508, -0.3405342233544581},
                {-0.3684881145497875, 0.16399263880284634, 0.29550452425305146, 0.2955045242530498, 0.1639926388028436, -0.3684881145497896, 5.894275923874753E-16, -0.3684881145497893, 0.16399263880284137, -0.29550452425305196, -0.2955045242530513, -0.16399263880283968, 0.3684881145497895},
                {-0.37796447300922825, 3.4499576848210558E-15, 0.37796447300922653, -3.311758744787636E-15, 0.3779644730092271, -4.941849331316551E-16, -0.3779644730092273, -6.510496299465654E-16, -0.3779644730092273, 7.174763869488911E-16, 0.3779644730092269, -1.1096156628421294E-15, -0.3779644730092275},
                {-0.36848811454979247, -0.1639926388028369, 0.2955045242530504, -0.29550452425305296, 0.16399263880283851, 0.3684881145497891, -2.1244008397126507E-16, 0.36848811454978947, 0.16399263880284054, 0.295504524253051, -0.29550452425305207, 0.16399263880284165, 0.36848811454978864},
                {-0.3405342233544633, -0.2955045242530468, 0.08410500753631689, -0.3684881145497872, -0.23565699438616658, 0.1639926388028411, 0.3779644730092272, -0.16399263880284065, 0.23565699438616391, -0.36848811454978925, 0.08410500753631955, -0.2955045242530524, -0.34053422335445743},
                {-0.29550452425305757, -0.3684881145497836, -0.1639926388028439, -0.16399263880283765, -0.3684881145497902, -0.2955045242530517, 4.2009192199850775E-16, -0.2955045242530521, -0.3684881145497892, 0.16399263880284118, 0.16399263880284093, 0.3684881145497899, 0.29550452425305146},
                {-0.2356569943861691, -0.36848811454978364, -0.3405342233544602, 0.16399263880284168, -0.08410500753631817, -0.2955045242530521, -0.3779644730092269, 0.29550452425305207, 0.08410500753631918, 0.16399263880284018, -0.34053422335445793, -0.3684881145497898, -0.23565699438616328},
                {-0.1639926388028449, -0.295504524253047, -0.36848811454978997, 0.3684881145497868, 0.2955045242530547, 0.16399263880284082, -2.775452898661407E-16, 0.16399263880284112, 0.29550452425305135, -0.36848811454978886, 0.3684881145497896, 0.29550452425305224, 0.1639926388028407},
                {-0.08410500753632161, -0.16399263880283826, -0.23565699438616378, 0.2955045242530493, 0.3405342233544605, 0.36848811454978947, 0.37796447300922686, -0.36848811454978897, -0.3405342233544572, 0.29550452425305185, -0.2356569943861635, -0.16399263880284107, -0.08410500753631917}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {3.9498558243636497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 3.801937735804853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 3.563662964936057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 3.246979603717472, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 2.86776747823511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 2.4450418679126225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9999999999999956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.55495813208737, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1322325217648825, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7530203962825344, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.43633703506394017, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19806226419516157, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05014417563635299}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.08410500753631509, 0.16399263880284318, -0.23565699438616303, -0.2955045242530555, 0.3405342233544564, -0.36848811454978875, 0.3779644730092268, 0.36848811454978814, -0.34053422335445843, -0.29550452425305224, -0.23565699438616364, 0.16399263880284076, -0.08410500753632014},
                {-0.16399263880283405, 0.2955045242530548, -0.3684881145497886, -0.3684881145497921, 0.29550452425304924, -0.16399263880284057, -4.52932195330215E-16, -0.16399263880284073, 0.29550452425305196, 0.3684881145497896, 0.3684881145497889, -0.2955045242530517, 0.16399263880284215},
                {-0.23565699438615662, 0.3684881145497946, -0.34053422335445654, -0.1639926388028396, -0.0841050075363211, 0.2955045242530515, -0.3779644730092273, -0.2955045242530518, 0.0841050075363197, -0.1639926388028411, -0.3405342233544577, 0.36848811454978875, -0.23565699438616525},
                {-0.29550452425304596, 0.36848811454979585, -0.16399263880284007, 0.16399263880284487, -0.36848811454978714, 0.29550452425305135, 1.6656922322107796E-16, 0.29550452425305124, -0.3684881145497892, -0.16399263880284057, 0.16399263880284112, -0.3684881145497885, 0.29550452425305274},
                {-0.3405342233544535, 0.29550452425305757, 0.08410500753631987, 0.36848811454979, -0.23565699438616092, -0.1639926388028415, 0.3779644730092273, 0.16399263880284168, 0.2356569943861632, 0.3684881145497895, 0.08410500753631914, 0.2955045242530508, -0.34053422335445843},
                {-0.36848811454978697, 0.16399263880284584, 0.29550452425305185, 0.2955045242530495, 0.16399263880284307, -0.3684881145497896, 6.240198619989382E-16, -0.3684881145497889, 0.16399263880284137, -0.29550452425305196, -0.2955045242530511, -0.16399263880283996, 0.3684881145497893},
                {-0.3779644730092281, 4.9508608366712965E-15, 0.3779644730092266, -3.5522866238722237E-15, 0.37796447300922714, 2.787349978728058E-16, -0.37796447300922753, -7.620690979944889E-16, -0.377964473009227, 3.4454426295857115E-16, 0.3779644730092268, -1.0718612016345835E-15, -0.3779644730092272},
                {-0.36848811454979247, -0.16399263880283632, 0.29550452425304974, -0.2955045242530531, 0.16399263880283765, 0.3684881145497895, -9.313670827680485E-17, 0.3684881145497898, 0.1639926388028408, 0.2955045242530512, -0.2955045242530518, 0.16399263880284184, 0.3684881145497889},
                {-0.3405342233544633, -0.2955045242530473, 0.08410500753631656, -0.36848811454978664, -0.2356569943861668, 0.1639926388028413, 0.37796447300922775, -0.16399263880284054, 0.2356569943861638, -0.3684881145497888, 0.08410500753632023, -0.29550452425305246, -0.34053422335445716},
                {-0.29550452425305757, -0.3684881145497836, -0.16399263880284426, -0.16399263880283782, -0.36848811454978986, -0.2955045242530514, 2.841173123933659E-16, -0.29550452425305196, -0.3684881145497889, 0.16399263880284132, 0.16399263880284057, 0.3684881145497898, 0.295504524253051},
                {-0.23565699438616883, -0.368488114549783, -0.34053422335446054, 0.1639926388028415, -0.08410500753631776, -0.2955045242530519, -0.377964473009227, 0.29550452425305196, 0.08410500753631948, 0.16399263880284026, -0.3405342233544581, -0.36848811454978964, -0.23565699438616214},
                {-0.16399263880284484, -0.2955045242530467, -0.36848811454979047, 0.36848811454978714, 0.29550452425305496, 0.16399263880284048, -4.975860314953998E-16, 0.16399263880284137, 0.29550452425305135, -0.3684881145497891, 0.36848811454978986, 0.295504524253052, 0.1639926388028399},
                {-0.08410500753632164, -0.16399263880283813, -0.23565699438616405, 0.29550452425304974, 0.34053422335446065, 0.3684881145497894, 0.3779644730092271, -0.3684881145497894, -0.3405342233544576, 0.2955045242530516, -0.23565699438616422, -0.16399263880284082, -0.08410500753631889}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());
    }
}
