package com.flag4j.linalg.decompositions;

import com.flag4j.Matrix;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class RealSVDTests {

    final SingularValueDecomposition<Matrix> svd = new RealSVD();

    double[][] aEntries, expSEntries, expUEntries, expVEntries;

    Matrix A, expS, expU, expV;

    @Test
    void svdTestCase() {
        // -------------------- Sub-case 1 --------------------
        aEntries = new double[][]{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        A = new Matrix(aEntries);

        expUEntries = new double[][]{
                {-0.21483723836839627, 0.8872306883463724, -8.128320784243849E-8},
                {-0.5205873894647371, 0.24964395298830144, -1.8062935076097443E-8},
                {-0.826337540561078, -0.3879427823697699, 3.010489179349574E-8}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {16.8481033526142, 0.0, 0.0},
                {0.0, 1.0683695145547072, 0.0},
                {0.0, 0.0, 7.375698489406456E-8}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.47967117787777147, -0.776690990321556, 0.40824829046386774},
                {-0.572367793972062, -0.07568647010456342, -0.8164965809277253},
                {-0.6650644100663526, 0.6253180501124451, 0.4082482904638589}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 2 --------------------
        aEntries = new double[][]{
                {3.45, -99.34, 14.5, 24.5},
                {-0.0024, 0, 25.1, 1.5},
                {100.4, 5.6, -4.1, -0.002}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.928192302137245, 0.37000088071161197, 0.03947655666076523},
                {-0.040269437244574824, 0.005584143138528875, -0.999173253129513},
                {0.36991542638441594, 0.9290146207773249, -0.009716568571038652}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {103.99805783777107, 0.0, 0.0, 0.0},
                {0.0, 100.10197909864617, 0.0, 0.0},
                {0.0, 0.0, 24.807778140450104, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {0.3263266903138798, 0.9445323500485495, -0.0337374569986359, -0.015209039937366746},
                {0.906537599280295, -0.31521260516182087, -0.16027287490914863, 0.23052808984279557},
                {-0.1537163754436852, 0.01694486795547631, -0.98626328050451, -0.058042130378792356},
                {-0.2192527039750221, 0.09062298112968464, -0.021427344494896472, 0.9712139805412127}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 3 --------------------
        aEntries = new double[][]{
                {34.5, 100.34},
                {-9.245, 0.13},
                {0, 1153.4},
                {14.5, -195.342}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.8938804065460952, 0.08547311955880338, 0.0, 0.0},
                {0.2398537404163953, 1.0712993718765095E-4, 0.0, 0.0},
                {0.01364794916742265, 0.9823523886528839, 0.0, 0.0},
                {-0.3784993203222, -0.16636742128204293, 0.0, 0.0}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {38.54456600966224, 0.0},
                {0.0, 1174.1202987429047},
                {0.0, 0.0},
                {0.0, 0.0}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.999999895990922, 4.5609006206020206E-4},
                {4.5609006206020206E-4, 0.9999998959909223}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 4 --------------------
        // This Toeplitz matrix is known to be difficult to compute eigenvalues of. As such, it is a good test matrix.
        aEntries = new double[][]{
                {2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2},
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.0841050075363192, -0.1639926388028397, 0.23565699438616336, -0.2955045242530517, 0.3405342233544583, -0.36848811454978886, -0.37796447300922775, 0.36848811454978875, -0.3405342233544574, 0.2955045242530508, -0.23565699438616416, 0.1639926388028438, 0.08410500753631517},
                {-0.1639926388028408, -0.29550452425304985, 0.3684881145497891, -0.3684881145497901, 0.2955045242530521, -0.1639926388028411, 5.551115123125793E-17, -0.16399263880284093, 0.2955045242530529, -0.36848811454978936, 0.3684881145497882, -0.29550452425305346, -0.16399263880285062},
                {-0.23565699438616455, -0.3684881145497867, 0.340534223354459, -0.16399263880284273, -0.08410500753631929, 0.29550452425305135, 0.37796447300922764, -0.2955045242530515, 0.08410500753631946, 0.16399263880284048, -0.3405342233544567, 0.368488114549797, 0.2356569943861651},
                {-0.29550452425305423, -0.3684881145497866, 0.16399263880284323, 0.1639926388028391, -0.3684881145497892, 0.295504524253052, -2.775557561562896E-17, 0.2955045242530515, -0.36848811454978914, 0.16399263880284023, 0.16399263880284212, -0.36848811454979397, -0.29550452425307033},
                {-0.3405342233544611, -0.2955045242530498, -0.08410500753631704, 0.3684881145497884, -0.23565699438616383, -0.16399263880284026, -0.3779644730092273, 0.16399263880284085, 0.235656994386164, -0.3684881145497884, 0.08410500753632015, 0.29550452425305845, 0.340534223354482},
                {-0.36848811454979097, -0.16399263880283937, -0.29550452425305007, 0.2955045242530522, 0.1639926388028409, -0.3684881145497887, 1.1102230246251585E-16, -0.3684881145497887, 0.16399263880283993, 0.2955045242530519, -0.2955045242530528, -0.16399263880283946, -0.36848811454981034},
                {-0.37796447300922714, 1.591482003301725E-15, -0.3779644730092261, 8.719083758804208E-16, 0.37796447300922786, 1.8162846848474947E-16, 0.3779644730092276, -3.5699450734882334E-17, -0.3779644730092279, -3.685899578902647E-16, 0.37796447300922764, 4.204068209825163E-16, 0.37796447300928404},
                {-0.36848811454978786, 0.16399263880284318, -0.2955045242530515, -0.29550452425305135, 0.16399263880284218, 0.368488114549789, 7.21644966006353E-16, 0.36848811454978875, 0.1639926388028409, -0.29550452425305124, -0.2955045242530517, 0.16399263880284043, -0.36848811454987457},
                {-0.34053422335445566, 0.29550452425305457, -0.08410500753632005, -0.36848811454978997, -0.23565699438616236, 0.16399263880284085, -0.3779644730092268, -0.16399263880284093, 0.23565699438616391, 0.36848811454979014, 0.0841050075363185, -0.29550452425305257, 0.3405342233545418},
                {-0.29550452425304863, 0.3684881145497921, 0.16399263880284046, -0.16399263880284304, -0.3684881145497883, -0.2955045242530518, 1.3877787807814481E-16, -0.2955045242530516, -0.36848811454978886, -0.16399263880284004, 0.16399263880284243, 0.3684881145497928, -0.29550452425315776},
                {-0.23565699438616025, 0.3684881145497919, 0.3405342233544586, 0.1639926388028389, -0.0841050075363191, -0.2955045242530523, 0.37796447300922775, 0.2955045242530514, 0.08410500753631846, -0.16399263880284112, -0.340534223354459, -0.3684881145497892, 0.23565699438623375},
                {-0.16399263880283804, 0.295504524253054, 0.36848811454979064, 0.3684881145497883, 0.295504524253052, 0.16399263880283985, 4.996003610813213E-16, 0.16399263880284035, 0.2955045242530513, 0.3684881145497891, 0.3684881145497884, 0.2955045242530411, -0.16399263880286474},
                {-0.08410500753631785, 0.16399263880284207, 0.23565699438616486, 0.2955045242530517, 0.3405342233544581, 0.36848811454978825, -0.3779644730092272, -0.3684881145497893, -0.3405342233544568, -0.2955045242530526, -0.2356569943861634, -0.16399263880284126, 0.08410500753633952}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {3.9498558243636532, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 3.8019377358048345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 3.563662964936067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 3.246979603717467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 2.8677674782351184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 2.4450418679126327, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9999999999999964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5549581320873729, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1322325217648825, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7530203962825326, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.43633703506394045, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19806226419516063, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.050144175636344865}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.08410500753631914, -0.16399263880283935, 0.23565699438616358, -0.2955045242530511, 0.34053422335445854, -0.36848811454978925, -0.37796447300922714, 0.36848811454978936, -0.3405342233544577, 0.2955045242530512, -0.23565699438616333, 0.1639926388028435, 0.08410500753631572},
                {-0.1639926388028411, -0.2955045242530498, 0.3684881145497898, -0.36848811454979014, 0.29550452425305235, -0.16399263880284137, 7.745184566398597E-17, -0.16399263880284132, 0.2955045242530524, -0.3684881145497888, 0.36848811454978814, -0.2955045242530566, -0.16399263880283435},
                {-0.2356569943861643, -0.36848811454978625, 0.3405342233544592, -0.1639926388028425, -0.08410500753631951, 0.29550452425305174, 0.3779644730092271, -0.29550452425305146, 0.08410500753631887, 0.16399263880284073, -0.34053422335445677, 0.3684881145497962, 0.23565699438615517},
                {-0.29550452425305507, -0.3684881145497863, 0.16399263880284398, 0.16399263880283912, -0.3684881145497893, 0.29550452425305246, -3.117047364577935E-16, 0.2955045242530515, -0.36848811454978875, 0.1639926388028405, 0.1639926388028401, -0.36848811454979724, -0.295504524253043},
                {-0.3405342233544623, -0.29550452425304946, -0.08410500753631743, 0.3684881145497885, -0.2356569943861641, -0.1639926388028406, -0.37796447300922653, 0.16399263880284112, 0.23565699438616394, -0.36848811454978875, 0.08410500753632041, 0.2955045242530604, 0.3405342233544504},
                {-0.36848811454979163, -0.16399263880283954, -0.295504524253051, 0.2955045242530524, 0.16399263880284096, -0.3684881145497895, 8.507598922222193E-17, -0.3684881145497892, 0.1639926388028401, 0.295504524253052, -0.2955045242530526, -0.16399263880284903, -0.3684881145497843},
                {-0.3779644730092274, 1.2971105741623325E-15, -0.3779644730092268, 7.406013516076662E-16, 0.37796447300922786, 1.9772798307525485E-16, 0.3779644730092266, -4.8734887653223424E-17, -0.37796447300922714, -8.916478666520788E-16, 0.3779644730092275, 8.132383655379272E-15, 0.377964473009227},
                {-0.36848811454978836, 0.163992638802843, -0.29550452425305207, -0.29550452425305107, 0.1639926388028421, 0.3684881145497896, 5.415725376836655E-16, 0.36848811454978925, 0.1639926388028412, -0.2955045242530505, -0.2955045242530512, 0.16399263880283285, -0.3684881145497936},
                {-0.3405342233544563, 0.29550452425305423, -0.08410500753632053, -0.36848811454978986, -0.23565699438616275, 0.16399263880284104, -0.37796447300922625, -0.16399263880284107, 0.2356569943861628, 0.368488114549788, 0.08410500753631803, -0.29550452425304413, 0.3405342233544657},
                {-0.2955045242530489, 0.3684881145497916, 0.16399263880284054, -0.16399263880284304, -0.3684881145497889, -0.295504524253052, -2.839118913924854E-16, -0.29550452425305185, -0.36848811454978775, -0.16399263880283935, 0.1639926388028427, 0.36848811454978203, -0.2955045242530614},
                {-0.23565699438616045, 0.3684881145497916, 0.3405342233544594, 0.163992638802839, -0.0841050075363194, -0.2955045242530527, 0.3779644730092271, 0.29550452425305185, 0.08410500753631835, -0.16399263880284218, -0.34053422335445943, -0.36848811454978225, 0.2356569943861722},
                {-0.16399263880283815, 0.2955045242530537, 0.3684881145497915, 0.3684881145497886, 0.29550452425305224, 0.16399263880284043, 2.9648863659331726E-16, 0.16399263880284076, 0.29550452425305135, 0.3684881145497901, 0.3684881145497899, 0.2955045242530455, -0.1639926388028466},
                {-0.08410500753631793, 0.16399263880284187, 0.23565699438616544, 0.29550452425305196, 0.34053422335445827, 0.368488114549789, -0.3779644730092267, -0.3684881145497895, -0.3405342233544569, -0.2955045242530525, -0.23565699438616405, -0.1639926388028377, 0.08410500753632245}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());
    }
}
