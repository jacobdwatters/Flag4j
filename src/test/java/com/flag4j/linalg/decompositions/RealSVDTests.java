package com.flag4j.linalg.decompositions;

import com.flag4j.Matrix;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class RealSVDTests {

    final SVD<Matrix> svd = new RealSVD(true);

    double[][] aEntries, expSEntries, expUEntries, expVEntries;

    Matrix A, expS, expU, expV;

    @Test
    void svdTestCase() {
        // -------------------- Sub-case 1 --------------------
        aEntries = new double[][]{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        A = new Matrix(aEntries);

        expUEntries = new double[][]{
                {0.21483723836839624, 0.8872306883463706, -0.4082482904638626},
                {0.520587389464737, 0.24964395298829764, 0.8164965809277261},
                {0.8263375405610778, -0.3879427823697744, -0.40824829046386324}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {16.848103352614167, 0.0, 0.0},
                {0.0, 1.0683695145547083, 0.0},
                {0.0, 0.0, 1.1023900701150984E-16}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {0.4796711778777717, -0.7766909903215589, -0.40824829046386213},
                {0.5723677939720622, -0.07568647010455855, 0.8164965809277265},
                {0.665064410066353, 0.6253180501124429, -0.4082482904638633}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 2 --------------------
        aEntries = new double[][]{
                {3.45, -99.34, 14.5, 24.5},
                {-0.0024, 0, 25.1, 1.5},
                {100.4, 5.6, -4.1, -0.002}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.9281923021372552, -0.3700008807115815, 0.03947655666076522},
                {-0.04026943724457948, -0.00558414313852867, -0.9991732531295128},
                {0.36991542638439306, -0.9290146207773387, -0.009716568571038708}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {103.99805783776843, 0.0, 0.0},
                {0.0, 100.10197909864686, 0.0},
                {0.0, 0.0, 24.80777814045006}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {0.32632669031384415, -0.9445323500485623, -0.03373745699863586},
                {0.9065375992803111, 0.31521260516178945, -0.16027287490915043},
                {-0.1537163754436492, -0.016944867955472807, -0.98626328050451},
                {-0.21925270397504718, -0.09062298112967611, -0.021427344494903196}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 3 --------------------
        aEntries = new double[][]{
                {34.5, 100.34},
                {-9.245, 0.13},
                {0, 1153.4},
                {14.5, -195.342}
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {0.08547311955880307, 0.8938804065462778},
                {1.0712993718750231E-4, -0.2398537404164441},
                {0.9823523886528838, -0.013647949167425498},
                {-0.16636742128204293, 0.3784993203222771}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {1174.1202987429022, 0.0},
                {0.0, 38.544566009654424}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {4.560900620600983E-4, 0.9999998959909222},
                {0.9999998959909222, -4.560900620602084E-4}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());

        // -------------------- Sub-case 4 --------------------
        // This Toeplitz matrix is known to be difficult to compute eigenvalues of. As such, it is a good test matrix.
        aEntries = new double[][]{
                {2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2},
        };
        A = new Matrix(aEntries);
        expUEntries = new double[][]{
                {-0.08410500753631456, 0.16399263880284312, -0.23565699438616325, -0.29550452425305546, -0.3405342233544562, -0.36848811454978864, 0.3779644730092277, 0.36848811454978864, -0.34053422335445815, -0.16399263880282397, 0.29550452425305185, 0.29549179804090403, -0.08410500753631951},
                {-0.16399263880283396, 0.2955045242530553, -0.3684881145497887, -0.36848811454979136, -0.2955045242530493, -0.16399263880284037, -5.704559113296247E-16, -0.1639926388028403, 0.2955045242530516, 0.2955045242530254, -0.3684881145497892, -0.36846800508786487, 0.16399263880284107},
                {-0.23565699438615648, 0.3684881145497944, -0.3405342233544578, -0.1639926388028398, 0.08410500753632064, 0.29550452425305146, -0.3779644730092269, -0.2955045242530518, 0.08410500753631968, -0.3684881145497645, 0.16399263880284096, 0.16397529385890652, -0.23565699438616408},
                {-0.2955045242530449, 0.36848811454979447, -0.16399263880284065, 0.16399263880284368, 0.36848811454978714, 0.295504524253051, -3.472771119352039E-17, 0.2955045242530508, -0.3684881145497896, 0.3684881145497771, 0.16399263880284098, 0.16399984184009703, 0.29550452425305207},
                {-0.3405342233544533, 0.29550452425305723, 0.08410500753631968, 0.36848811454979025, 0.23565699438616025, -0.1639926388028412, 0.37796447300922714, 0.1639926388028415, 0.23565699438616344, -0.29550452425305673, -0.36848811454978914, -0.3684816943875855, -0.3405342233544581},
                {-0.3684881145497876, 0.16399263880284648, 0.2955045242530512, 0.2955045242530498, -0.16399263880284323, -0.3684881145497896, 4.384985904304074E-16, -0.3684881145497893, 0.1639926388028412, 0.16399263880286055, 0.29550452425305157, 0.29548767465052744, 0.3684881145497896},
                {-0.3779644730092283, 4.019580754092799E-15, 0.3779644730092262, -3.4989313569403758E-15, -0.37796447300922675, -3.1223344085292313E-16, -0.3779644730092273, -5.799363376691407E-16, -0.3779644730092274, -2.5606500223148034E-14, -1.9114484300919419E-16, 2.0446227308846337E-5, -0.3779644730092275},
                {-0.3684881145497925, -0.16399263880283677, 0.2955045242530505, -0.29550452425305285, -0.16399263880283846, 0.36848811454978947, -3.0464143061185476E-16, 0.36848811454978964, 0.16399263880284048, -0.16399263880282078, -0.2955045242530517, -0.2955200488586507, 0.3684881145497887},
                {-0.34053422335446326, -0.29550452425304696, 0.0841050075363171, -0.368488114549787, 0.2356569943861668, 0.16399263880284104, 0.37796447300922736, -0.16399263880284057, 0.2356569943861641, 0.2955045242530464, 0.36848811454978925, 0.36849168506010044, -0.34053422335445743},
                {-0.29550452425305757, -0.36848811454978353, -0.1639926388028436, -0.1639926388028375, 0.3684881145497903, -0.2955045242530517, 4.3274479714400224E-16, -0.2955045242530521, -0.3684881145497893, -0.3684881145498015, -0.1639926388028412, -0.16398133122040826, 0.29550452425305146},
                {-0.23565699438616916, -0.3684881145497838, -0.34053422335445993, 0.16399263880284212, 0.08410500753631794, -0.295504524253052, -0.3779644730092271, 0.2955045242530522, 0.084105007536319, 0.36848811454981384, -0.16399263880284046, -0.16401365415636474, -0.23565699438616328},
                {-0.16399263880284495, -0.2955045242530473, -0.3684881145497898, 0.36848811454978736, -0.295504524253055, 0.1639926388028409, -1.2969551283919115E-17, 0.16399263880284118, 0.2955045242530514, -0.29550452425307827, 0.3684881145497891, 0.36851093200083557, 0.16399263880284068},
                {-0.08410500753632168, -0.16399263880283846, -0.23565699438616391, 0.2955045242530497, -0.3405342233544607, 0.36848811454978936, 0.377964473009227, -0.368488114549789, -0.3405342233544573, 0.16399263880285758, -0.29550452425305196, -0.2955189875993492, -0.08410500753631917}
        };
        expU = new Matrix(expUEntries);
        expSEntries = new double[][]{
                {3.9498558243636426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 3.8019377358048496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 3.5636629649360563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 3.24697960371747, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 2.867767478235111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 2.4450418679126233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9999999999999947, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5549581320873704, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1322325217648823, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19806226419516224, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0557485677876462E-14, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1931758108136007E-14, 0.0},
                {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.050144175636352976}
        };
        expS = new Matrix(expSEntries);
        expVEntries = new double[][]{
                {-0.08410500753631502, 0.1639926388028431, -0.2356569943861631, -0.29550452425305557, -0.3405342233544566, -0.368488114549789, 0.3779644730092268, 0.36848811454978814, -0.3405342233544584, -0.16399263880283368, 0.2356655752740751, -0.23565699438616908, -0.08410500753632012},
                {-0.16399263880283405, 0.2955045242530544, -0.36848811454978864, -0.36848811454979197, -0.2955045242530491, -0.1639926388028406, -4.370840795723551E-16, -0.16399263880284062, 0.29550452425305196, 0.2955045242530404, -0.36849854705605795, 0.36848811454979896, 0.16399263880284218},
                {-0.23565699438615653, 0.3684881145497946, -0.340534223354457, -0.16399263880283932, 0.08410500753632098, 0.2955045242530517, -0.3779644730092271, -0.29550452425305185, 0.08410500753631966, -0.368488114549778, 0.3405388674626745, -0.3405342233544703, -0.23565699438616525},
                {-0.295504524253046, 0.3684881145497959, -0.1639926388028403, 0.1639926388028445, 0.3684881145497873, 0.29550452425305157, 1.0525029067161867E-16, 0.2955045242530515, -0.36848811454978914, 0.3684881145497826, -0.1639882334598601, 0.16399263880285347, 0.2955045242530528},
                {-0.3405342233544533, 0.29550452425305773, 0.08410500753631951, 0.36848811454979047, 0.2356569943861609, -0.16399263880284135, 0.3779644730092272, 0.16399263880284132, 0.23565699438616305, -0.2955045242530527, -0.08411521768844815, 0.08410500753630931, -0.34053422335445843},
                {-0.36848811454978675, 0.16399263880284606, 0.2955045242530515, 0.295504524253049, -0.1639926388028432, -0.36848811454978925, 6.08694928851536E-16, -0.36848811454978897, 0.16399263880284137, 0.163992638802849, 0.29551259677161446, -0.295504524253046, 0.3684881145497893},
                {-0.3779644730092278, 5.326925148604528E-15, 0.37796447300922675, -3.4615503650880857E-15, -0.3779644730092273, 3.364762093805448E-16, -0.37796447300922753, -9.696754361631609E-16, -0.3779644730092271, -1.1445903600107511E-14, -0.3779643984403202, 0.37796447300922725, -0.37796447300922714},
                {-0.3684881145497925, -0.16399263880283607, 0.2955045242530499, -0.2955045242530528, -0.1639926388028376, 0.36848811454978936, -6.401399929475219E-17, 0.36848811454978975, 0.16399263880284098, -0.1639926388028313, 0.29549659473269413, -0.29550452425305745, 0.3684881145497889},
                {-0.34053422335446343, -0.2955045242530472, 0.08410500753631649, -0.36848811454978714, 0.23565699438616694, 0.1639926388028414, 0.37796447300922775, -0.16399263880284023, 0.2356569943861637, 0.2955045242530488, -0.08409412979567953, 0.0841050075363298, -0.3405342233544572},
                {-0.2955045242530577, -0.3684881145497836, -0.16399263880284395, -0.16399263880283768, 0.36848811454978964, -0.2955045242530512, 1.1636179733573712E-16, -0.29550452425305207, -0.36848811454978914, -0.36848811454979485, -0.16399778794004485, 0.16399263880282813, 0.29550452425305107},
                {-0.23565699438616894, -0.36848811454978314, -0.34053422335446015, 0.16399263880284196, 0.08410500753631749, -0.29550452425305185, -0.377964473009227, 0.29550452425305196, 0.08410500753631962, 0.3684881145498012, 0.3405304012840472, -0.3405342233544457, -0.23565699438616214},
                {-0.1639926388028449, -0.295504524253047, -0.3684881145497902, 0.3684881145497871, -0.29550452425305496, 0.16399263880284037, -3.859980527935098E-16, 0.16399263880284143, 0.2955045242530513, -0.295504524253065, -0.3684770312208135, 0.3684881145497795, 0.1639926388028399},
                {-0.0841050075363217, -0.16399263880283832, -0.235656994386164, 0.2955045242530494, -0.3405342233544605, 0.36848811454978936, 0.3779644730092271, -0.36848811454978936, -0.34053422335445777, 0.16399263880284942, 0.23564790248699163, -0.2356569943861584, -0.08410500753631889}
        };
        expV = new Matrix(expVEntries);

        svd.decompose(A);
        assertEquals(expU, svd.getU());
        assertEquals(expS, svd.getS());
        assertEquals(expV, svd.getV());
    }
}
