package org.flag4j.arrays.dense.matrix;

import org.flag4j.arrays.Shape;
import org.flag4j.arrays.dense.Matrix;
import org.flag4j.linalg.MatrixNorms;
import org.flag4j.util.Flag4jConstants;
import org.flag4j.util.exceptions.LinearAlgebraException;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class NormTests {
    Shape aShape;
    double[] aData;
    Matrix a;
    double exp;
    double p;
    double q;

    @Test
    void schattenNormTests() {
        // ---------------- sub-case 1 ----------------
        aShape = new Shape(5, 5);
        aData = new double[]{0.5508, 0.70815, 0.2909, 0.51083, 0.89295, 0.89629, 0.12559, 0.20724, 0.05147, 0.44081, 0.02988, 0.45683, 0.64914, 0.27849, 0.67625, 0.59086, 0.02398, 0.55885, 0.25925, 0.4151, 0.28353, 0.69314, 0.44045, 0.15687, 0.54465};
        a = new Matrix(aShape, aData);
        p = 1;

        exp = 4.003647020302841;

        assertEquals(exp, MatrixNorms.schattenNorm(a, p), Flag4jConstants.EPS_F64);

        // ---------------- sub-case 2 ----------------
        aShape = new Shape(3, 2);
        aData = new double[]{0.5508, 0.70815, 0.2909, 0.51083, 0.89295, 0.89629};
        a = new Matrix(aShape, aData);

        p = 1;
        exp = 1.8037452927763704;

        assertEquals(exp, MatrixNorms.schattenNorm(a, p), Flag4jConstants.EPS_F64);

        // ---------------- sub-case 3 ----------------
        aShape = new Shape(2, 3);
        aData = new double[]{0.5508, 0.70815, 0.2909, 0.51083, 0.89295, 0.89629};
        a = new Matrix(aShape, aData);

        p = 1;
        exp = 1.9501167666102226;

        assertEquals(exp, MatrixNorms.schattenNorm(a, p), Flag4jConstants.EPS_F64);

        // ---------------- sub-case 4 ----------------
        aShape = new Shape(9, 9);
        aData = new double[]{0.5508, 0.70815, 0.2909, 0.51083, 0.89295, 0.89629, 0.12559, 0.20724, 0.05147, 0.44081,
                0.02988, 0.45683, 0.64914, 0.27849, 0.67625, 0.59086, 0.02398, 0.55885, 0.25925, 0.4151, 0.28353,
                0.69314, 0.44045, 0.15687, 0.54465, 0.78031, 0.30636, 0.22196, 0.38797, 0.93638, 0.976, 0.67238,
                0.90283, 0.84575, 0.37799, 0.09222, 0.65341, 0.55784, 0.36156, 0.22505, 0.40652, 0.46894, 0.26924,
                0.29179, 0.45769, 0.86053, 0.58625, 0.28349, 0.27798, 0.45462, 0.20541, 0.20138, 0.51404, 0.08723,
                0.48359, 0.36218, 0.70769, 0.74675, 0.69109, 0.68918, 0.3736, 0.66813, 0.33985, 0.57279, 0.32581,
                0.44515, 0.06153, 0.24268, 0.9716, 0.23058, 0.69148, 0.65048, 0.72394, 0.47509, 0.59666, 0.06697,
                0.07256, 0.19898, 0.15186, 0.1001, 0.12929};
        a = new Matrix(aShape, aData);

        p = 2;
        exp = 4.622437431215267;
        assertEquals(exp, MatrixNorms.schattenNorm(a, p), Flag4jConstants.EPS_F64);

        // ---------------- sub-case 5 ----------------
        aShape = new Shape(9, 9);
        aData = new double[]{0.5508, 0.70815, 0.2909, 0.51083, 0.89295, 0.89629, 0.12559, 0.20724, 0.05147, 0.44081, 0.02988, 0.45683, 0.64914, 0.27849, 0.67625, 0.59086, 0.02398, 0.55885, 0.25925, 0.4151, 0.28353, 0.69314, 0.44045, 0.15687, 0.54465, 0.78031, 0.30636, 0.22196, 0.38797, 0.93638, 0.976, 0.67238, 0.90283, 0.84575, 0.37799, 0.09222, 0.65341, 0.55784, 0.36156, 0.22505, 0.40652, 0.46894, 0.26924, 0.29179, 0.45769, 0.86053, 0.58625, 0.28349, 0.27798, 0.45462, 0.20541, 0.20138, 0.51404, 0.08723, 0.48359, 0.36218, 0.70769, 0.74675, 0.69109, 0.68918, 0.3736, 0.66813, 0.33985, 0.57279, 0.32581, 0.44515, 0.06153, 0.24268, 0.9716, 0.23058, 0.69148, 0.65048, 0.72394, 0.47509, 0.59666, 0.06697, 0.07256, 0.19898, 0.15186, 0.1001, 0.12929};
        a = new Matrix(aShape, aData);

        p = Double.POSITIVE_INFINITY;
        exp = 4.169634097557556;
        assertEquals(exp, MatrixNorms.schattenNorm(a, p), Flag4jConstants.EPS_F64);

        // ---------------- sub-case 6 ----------------
        aShape = new Shape(9, 9);
        aData = new double[]{0.5508, 0.70815, 0.2909, 0.51083, 0.89295, 0.89629, 0.12559, 0.20724, 0.05147, 0.44081, 0.02988, 0.45683, 0.64914, 0.27849, 0.67625, 0.59086, 0.02398, 0.55885, 0.25925, 0.4151, 0.28353, 0.69314, 0.44045, 0.15687, 0.54465, 0.78031, 0.30636, 0.22196, 0.38797, 0.93638, 0.976, 0.67238, 0.90283, 0.84575, 0.37799, 0.09222, 0.65341, 0.55784, 0.36156, 0.22505, 0.40652, 0.46894, 0.26924, 0.29179, 0.45769, 0.86053, 0.58625, 0.28349, 0.27798, 0.45462, 0.20541, 0.20138, 0.51404, 0.08723, 0.48359, 0.36218, 0.70769, 0.74675, 0.69109, 0.68918, 0.3736, 0.66813, 0.33985, 0.57279, 0.32581, 0.44515, 0.06153, 0.24268, 0.9716, 0.23058, 0.69148, 0.65048, 0.72394, 0.47509, 0.59666, 0.06697, 0.07256, 0.19898, 0.15186, 0.1001, 0.12929};
        a = new Matrix(aShape, aData);

        p = 3.25621;
        exp = 4.215513043537818;
        assertEquals(exp, MatrixNorms.schattenNorm(a, p), Flag4jConstants.EPS_F64);

        // ---------------- sub-case 7 ----------------
        aShape = new Shape(4, 4);
        aData = new double[]{0.5508, 0.70815, 0.2909, 0.51083, 0.89295,
                0.89629, 0.12559, 0.20724, 0.05147, 0.44081,
                0.02988, 0.45683, 0.64914, 0.27849, 0.67625, 0.59086};
        a = new Matrix(aShape, aData);

        p = -1;
        exp = 0.026667736708101627;
        assertEquals(exp, MatrixNorms.schattenNorm(a, p), Flag4jConstants.EPS_F64);

        // ---------------- sub-case 8 ----------------
        aShape = new Shape(4, 4);
        aData = new double[]{0.5508, 0.70815, 0.2909, 0.51083, 0.89295, 0.89629, 0.12559, 0.20724, 0.05147, 0.44081, 0.02988, 0.45683, 0.64914, 0.27849, 0.67625, 0.59086};
        a = new Matrix(aShape, aData);

        p = Double.NEGATIVE_INFINITY;
        exp = 0.029990005262000602;

        assertEquals(exp, MatrixNorms.schattenNorm(a, p), Flag4jConstants.EPS_F64);
    }


    @Test
    void entryWiseNormTests() {
        // ---------------- sub-case 1 ----------------
        aShape = new Shape(4, 4);
        aData = new double[]{0.03766, 0.53811, 0.6172, 0.83172, 0.46543, 0.06995, 0.05425, 0.57504, 0.33034, 0.42442, 0.29937, 0.92909, 0.40243, 0.48919, 0.89897, 0.2998};
        a = new Matrix(aShape, aData);

        p = 1;
        exp = 7.26297;
        assertEquals(exp, MatrixNorms.entryWiseNorm(a, p));

        // ---------------- sub-case 2 ----------------
        aShape = new Shape(7, 2);
        aData = new double[]{0.52663, 0.10295, 0.80074, 0.70444, 0.50312, 0.94987, 0.65969, 0.4173, 0.09431, 0.36203, 0.77842, 0.06282, 0.2784, 0.40589};
        a = new Matrix(aShape, aData);

        p = -1;
        exp = 0.017283789037010208;
        assertEquals(exp, MatrixNorms.entryWiseNorm(a, p));

        // ---------------- sub-case 3 ----------------
        aShape = new Shape(3, 5);
        aData = new double[]{0.58006, 1.53305, -0.16158, -0.87468, 0.35272, -1.96337, 1.03996, -0.03287, -1.32042, -0.95082, -0.18674, -0.74043, 1.61446, 0.3053, 1.06991};
        a = new Matrix(aShape, aData);

        p = 2;
        exp = 3.9515551558468727;
        assertEquals(exp, MatrixNorms.entryWiseNorm(a, p));

        // ---------------- sub-case 4 ----------------
        aShape = new Shape(3, 3);
        aData = new double[]{1.30776, -0.03747, -1.68686, -0.46246, 0.99453, 1.47121, 1.18819, -0.04004, -0.09288};
        a = new Matrix(aShape, aData);

        p = -2;
        exp = 0.026173754083315442;
        assertEquals(exp, MatrixNorms.entryWiseNorm(a, p));

        // ---------------- sub-case 5 ----------------
        aShape = new Shape(3, 3);
        aData = new double[]{-0.57719, 0.76596, -0.78453, -0.33543, 1.861, -0.38476, -0.84035, -1.7351, 0.90212};
        a = new Matrix(aShape, aData);

        p = 4.51;
        exp = 2.1303977251997614;
        assertEquals(exp, MatrixNorms.entryWiseNorm(a, p));

        // ---------------- sub-case 6 ----------------
        aShape = new Shape(3, 3);
        aData = new double[]{-0.79318, 1.54067, -0.5029, 0.67312, -0.24927, -0.97936, 0.61532, 0.61237, 0.00226};
        a = new Matrix(aShape, aData);

        p = Double.POSITIVE_INFINITY;
        exp = 1.54067;
        assertEquals(exp, MatrixNorms.entryWiseNorm(a, p));

        // ---------------- sub-case 7 ----------------
        aShape = new Shape(3, 3);
        aData = new double[]{0.87487, -0.41412, 1.05809, 1.97711, -1.33573, -1.05693, 0.92927, -1.43141, -0.71267};
        a = new Matrix(aShape, aData);

        p = Double.NEGATIVE_INFINITY;
        exp = 0.41412;
        assertEquals(exp, MatrixNorms.entryWiseNorm(a, p));
    }

    @Test
    void inducedNormTests() {
        // ---------------- sub-case 1 ----------------
        aShape = new Shape(6, 8);
        aData = new double[]{0.87001, -0.53075, 1.80658, -0.36132, -0.86666, 2.14868, -1.48927, 1.7104, -0.24429,
                0.00475, 0.00986, -1.52087, 0.01851, -0.91805, -0.68661,
                0.63289, 0.27013, -1.8278, 2.31575, 0.00153, 0.5054, -0.24858,
                -0.32284, 1.44068, 0.09654, 1.80215, -0.85929, -0.83069, 0.12971,
                -0.40369, -0.86397, -0.31808, -0.94131, 0.07882, -0.36221, -0.56579,
                0.25437, 0.86334, -0.44146, 0.53003, 0.06752, -0.16675, 0.65504,
                -1.92004, -0.86963, -0.9875, -0.12287, -0.08252};
        a = new Matrix(aShape, aData);

        p = 1;
        exp = 6.008729999999999;
        assertEquals(exp, MatrixNorms.inducedNorm(a, p));

        // ---------------- sub-case 2 ----------------
        aShape = new Shape(6, 8);
        aData = new double[]{-1.11826, -1.09012, -0.42251, -0.24597, 1.71915, 1.59003, 0.15207, -0.14672, 0.11485, 1.41536, 0.72123, 1.22943, -2.11986, 0.02405, 0.0345, 0.86933, 0.39555, -0.49977, 0.27804, -1.24306, -0.74671, -0.25535, -0.06707, 0.2038, -0.78898, -0.1462, -0.39705, -0.60432, 0.84509, -2.39218, -0.58742, 1.2572, 1.21936, 0.23098, 0.99622, -1.49354, 0.44016, 1.76301, -0.93744, -0.24744, 1.37773, 0.92328, 0.90134, -0.10557, 0.40794, -1.60648, 0.58006, 0.33817};
        a = new Matrix(aShape, aData);

        p = -1;
        exp = 2.35856;
        assertEquals(exp, MatrixNorms.inducedNorm(a, p));

        // ---------------- sub-case 3 ----------------
        aShape = new Shape(14, 14);
        aData = new double[]{0.72041, 1.89717, 1.94906, 0.27556, -1.1979, -0.53392, -0.21621, -0.04478, 0.35898, -0.0922, 1.3103,
                -0.21821, 0.22011, 0.3564, 0.72875, -1.29384, -0.13304, -1.66793, 0.50722, -1.38537, -0.42744, 0.79773, 0.4184,
                -0.00807, 0.20668, -1.1379, -1.37254, -0.03686, 0.99935, 0.97841, 0.09745, -1.60085, 1.10699, -0.15013, 0.65144,
                -0.3773, -1.08707, 0.83051, -0.36223, 1.48693, 0.35924, 1.24536, 0.13307, -0.58486, 0.32037, 0.18886, -0.06011,
                0.35101, -0.07892, -1.50245, -0.3265, 1.28271, 0.04595, 2.22292, -1.04199, 0.87992, -0.42606, 0.11407, 0.27266,
                0.05567, -1.2789, 1.05216, -0.57621, 0.13403, -0.73407, -0.19883, -0.48796, 0.10257, 0.5898, -0.12817, -0.28215,
                -0.9266, -1.54239, 1.21185, -0.03149, -0.65298, -0.66052, 1.58396, -0.62336, -0.47375, -0.41352, -1.85793,
                -1.49312, 0.94452, -0.05956, 2.71684, 0.27951, -2.07396, -0.99021, -1.36677, -0.50161, -1.16948, -0.26776,
                -0.12959, 1.0008, 0.35709, 0.40961, -0.20094, 0.57074, 0.12553, 0.72861, 0.63256, 0.64524, 0.29983, -0.12953,
                0.52116, -1.69015, -0.10428, -1.16605, -0.55069, 0.02144, 1.13731, -0.46032, 1.13434, 1.01273, -0.18879, 0.41548,
                0.04057, 1.49239, -0.92921, -1.21722, -0.68579, -0.13984, 0.82782, 0.37276, 1.15156, 0.93135, 0.22033, 1.24912,
                0.93163, 0.35953, 1.3668, 0.31723, 1.11881, -0.65634, -0.47619, 0.65127, 0.81784, 2.03589, 0.76112, 0.47193,
                -0.6429, 1.15648, 0.53338, 1.08118, -1.86393, -0.61871, -0.30993, -0.37079, -0.13606, -0.13351, 0.10444, 0.18017,
                -0.01592, -0.6389, -0.97788, 0.78164, -0.34281, -0.61406, -1.70849, 3.08745, 0.28245, 2.32343, -1.26434, -0.55688,
                -0.07774, -0.04553, -2.44962, 0.11056, 1.34567, -0.72284, -1.29676, -1.33067, 0.05912, 0.20892, 1.46179, -2.28954,
                -1.45136, -0.44066, 0.84616, -0.52071, -0.82045, -0.54602, 1.38205, -0.22712, -0.10525, 0.06766, 0.0821, 1.88073,
                -0.12256, 1.32759, 2.51665, 1.39866, 0.55066, 1.49893, 0.83932};
        a = new Matrix(aShape, aData);

        p = 2;
        exp = 6.764801864669111;
        assertEquals(exp, MatrixNorms.inducedNorm(a, p), Flag4jConstants.EPS_F64);

        // ---------------- sub-case 4 ----------------
        aShape = new Shape(5, 5);
        aData = new double[]{0.58539, -2.14589, -2.27855, -0.80679, -1.05446, -0.35289, -0.43887, -1.46231, 0.43138, -0.19616,
                0.05008, 1.85505, -0.7718, -0.11618, -0.60505, 0.3251, -1.93755, 0.41506, -1.2915, -1.2645, 0.33895, 2.39226,
                1.35074, 0.46931, -0.31796};
        a = new Matrix(aShape, aData);

        p = -2;
        exp = 0.49704027727504857;
        assertEquals(exp, MatrixNorms.inducedNorm(a, p), Flag4jConstants.EPS_F64);

        // ---------------- sub-case 5 ----------------
        aShape = new Shape(5, 5);
        aData = new double[]{-0.9525, 1.27424, 0.98569, -0.27018, 0.82013, -0.17059, 0.57118, 0.50879, 1.08135, -1.05082, -0.56911,
                0.17297, 0.21703, 0.57278, 0.15335, -2.26664, -1.46254, 0.70572, 0.29167, 0.8563, -1.05627, 0.01729,
                0.12783, 0.13725, -0.5995};
        a = new Matrix(aShape, aData);

        p = Double.POSITIVE_INFINITY;
        exp = 5.582870000000001;
        assertEquals(exp, MatrixNorms.inducedNorm(a, p));

        // ---------------- sub-case 6 ----------------
        aShape = new Shape(5, 5);
        aData = new double[]{-0.32281, 2.19241, -0.56914, 0.69786, 0.35078, 0.28429, 0.4643, -0.13171, -0.23963, 0.89503, -0.61056,
                -1.26108, -0.72803, -1.38127, 0.8772, 0.88868, 0.57504, -0.45355, 0.23406, 3.34191, -0.07215, 0.1964,
                0.63613, 0.20461, 1.03078};
        a = new Matrix(aShape, aData);

        p = Double.NEGATIVE_INFINITY;
        exp = 2.0149600000000003;
        assertEquals(exp, MatrixNorms.inducedNorm(a, p));

        // ---------------- sub-case 7 ----------------
        a = new Matrix(5, 5);
        assertEquals(0, MatrixNorms.inducedNorm(a, 1), 1e-16);
        assertEquals(0, MatrixNorms.inducedNorm(a, -1), 1e-16);
        // TODO: SVD does not converge here (i.e. Schur decomp does not converge). Need to do some work. Balancing first may
        //  fix or partly fix this.
//        assertEquals(0, MatrixNorms.inducedNorm(a, 2), 1e-16);
//        assertEquals(0, MatrixNorms.inducedNorm(a, -2), 1e-16);
        assertEquals(0, MatrixNorms.inducedNorm(a, Double.POSITIVE_INFINITY), 1e-16);
        assertEquals(0, MatrixNorms.inducedNorm(a, Double.NEGATIVE_INFINITY), 1e-16);

        // ---------------- sub-case 8 ----------------
        assertThrows(LinearAlgebraException.class, () -> MatrixNorms.inducedNorm(a, 2.2));
        assertThrows(LinearAlgebraException.class, () -> MatrixNorms.inducedNorm(a, 15.332));
    }
}
