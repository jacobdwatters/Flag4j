package org.flag4j.sparse_csr_complex_matrix;

import org.flag4j.arrays.Shape;
import org.flag4j.arrays_old.dense.CMatrixOld;
import org.flag4j.arrays_old.sparse.CsrCMatrixOld;
import org.flag4j.arrays_old.sparse.CsrMatrixOld;
import org.flag4j.complex_numbers.CNumber;
import org.flag4j.util.exceptions.LinearAlgebraException;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class ComplexCsrMatMultTests {
    CsrCMatrixOld A;
    CsrCMatrixOld B;
    CsrMatrixOld BReal;
    CMatrixOld exp;
    CsrCMatrixOld expCsr;

    CNumber[] aEntries;
    CNumber[] bEntries;
    double[] bRealEntries;
    CNumber[] expCsrEntries;
    CNumber[][] expEntries;
    Shape aShape;
    Shape bShape;
    Shape expCsrShape;
    int[] aRowPointers;
    int[] bRowPointers;
    int[] expCsrRowPointers;
    int[] aColIndices;
    int[] bColIndices;
    int[] expCsrColIndices;

    @Test
    void standardTests() {
        // ---------------------- Sub-case 1 ----------------------
        aShape = new Shape(12, 15);
        aEntries = new CNumber[]{new CNumber(0.77279, 0.0163), new CNumber(0.05268, 0.98556),
                new CNumber(0.65392, 0.68884), new CNumber(0.16431, 0.39853),
                new CNumber(0.31731, 0.83634), new CNumber(0.72256, 0.95802), new CNumber(0.39943, 0.51254),
                new CNumber(0.10433, 0.49811), new CNumber(0.74816, 0.64264), new CNumber(0.62972, 0.2863),
                new CNumber(0.0203, 0.95356), new CNumber(0.09873, 0.08571), new CNumber(0.18539, 0.17928),
                new CNumber(0.36602, 0.56283), new CNumber(0.08856, 0.99041), new CNumber(0.99512, 0.69705),
                new CNumber(0.45451, 0.6559), new CNumber(0.16631, 0.00017)};
        aRowPointers = new int[]{0, 1, 4, 4, 4, 7, 9, 12, 14, 16, 16, 17, 18};
        aColIndices = new int[]{6, 1, 6, 7, 2, 3, 5, 5, 8, 5, 7, 11, 3, 11, 4, 11, 2, 10};
        A = new CsrCMatrixOld(aShape, aEntries, aRowPointers, aColIndices);

        bShape = new Shape(15, 3);
        bEntries = new CNumber[]{new CNumber(0.03912, 0.1528), new CNumber(0.94468, 0.17732),
                new CNumber(0.12706, 0.20224), new CNumber(0.64472, 0.00914), new CNumber(0.91531, 0.99444),
                new CNumber(0.09635, 0.11424), new CNumber(0.59352, 0.14332), new CNumber(0.96023, 0.83955),
                new CNumber(0.84046, 0.46896)};
        bRowPointers = new int[]{0, 0, 0, 0, 3, 5, 5, 5, 5, 5, 5, 6, 7, 7, 9, 9};
        bColIndices = new int[]{0, 1, 2, 1, 2, 1, 0, 0, 1};
        B = new CsrCMatrixOld(bShape, bEntries, bRowPointers, bColIndices);

        expEntries = new CNumber[][]{
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("-0.11811890879999999+0.14788491039999999i"), new CNumber("0.5127118743999999+1.0331466728i"),
                        new CNumber("-0.10194149120000001+0.2678565556i")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0463142724+0.0650205828i"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.11643386760000003+0.4218498736000001i"), new CNumber("0.1433442956+0.20223558519999998i"),
                        new CNumber("-0.012701933799999995+0.060272590400000006i")},
                {new CNumber("0.49072241640000014+0.5563337144i"), new CNumber("0.0480440558+0.6393465736i"),
                        new CNumber("-0.9038434667999999+0.9945997835i")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.016004547700000003+0.019015633900000002i"), new CNumber("0.0")}};
        exp = new CMatrixOld(expEntries);

        assertEquals(exp, A.mult(B));

        // ---------------------- Sub-case 2 ----------------------
        A = new CsrCMatrixOld(10, 15);
        B = new CsrCMatrixOld(11, 124);
        assertThrows(LinearAlgebraException.class, ()->A.mult(B));

        A = new CsrCMatrixOld(156, 9);
        B = new CsrCMatrixOld(11, 156);
        assertThrows(LinearAlgebraException.class, ()->A.mult(B));

        // ---------------------- Sub-case 3 ----------------------
        aShape = new Shape(12, 15);
        aEntries = new CNumber[]{new CNumber(0.03217, 0.19257), new CNumber(0.03266, 0.75555),
                new CNumber(0.27707, 0.77844), new CNumber(0.93164, 0.53138), new CNumber(0.94676, 0.69143),
                new CNumber(0.25618, 0.19521), new CNumber(0.18874, 0.14006), new CNumber(0.20942, 0.43374),
                new CNumber(0.80519, 0.21179), new CNumber(0.63153, 0.01386), new CNumber(0.25436, 0.21729),
                new CNumber(0.37389, 0.81603), new CNumber(0.80818, 0.93103), new CNumber(0.9885, 0.30908),
                new CNumber(0.48155, 0.487), new CNumber(0.00731, 0.57782), new CNumber(0.10605, 0.34369),
                new CNumber(0.15898, 0.79035)};
        aRowPointers = new int[]{0, 2, 3, 3, 4, 4, 8, 8, 8, 12, 12, 14, 18};
        aColIndices = new int[]{4, 9, 0, 0, 3, 9, 12, 14, 1, 2, 5, 14, 0, 2, 1, 4, 10, 12};
        A = new CsrCMatrixOld(aShape, aEntries, aRowPointers, aColIndices);

        bShape = new Shape(15, 3);
        bRealEntries = new double[]{0.03306910239482874, 0.8636901552440979, 0.49589707896846047, 0.06465028630912939,
                0.6291181046483528, 0.44287285471666227, 0.6325469257819518, 0.22809135315396034, 0.5262606791808147};
        bRowPointers = new int[]{0, 0, 0, 1, 1, 1, 2, 2, 4, 5, 5, 6, 7, 8, 8, 9};
        bColIndices = new int[]{1, 2, 0, 1, 0, 1, 1, 2, 0};
        BReal = new CsrMatrixOld(bShape, bRealEntries, bRowPointers, bColIndices);

        expEntries = new CNumber[][]{
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.1102095114340462+0.22826030698788655i"), new CNumber("0.0"), new CNumber("0.04304996199427847+0.03194647492274368i")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.1967636053389148+0.4294445020319202i"), new CNumber("0.020884130235406195+0.00045833775919232637i"), new CNumber("0.21968822788788872+0.18767123383299003i")},
                {new CNumber("0.0"), new CNumber("0.0"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.032688807717288215+0.010220998168193668i"), new CNumber("0.0")},
                {new CNumber("0.0"), new CNumber("0.046966666242702036+0.15221097143756965i"), new CNumber("0.03626196332441662+0.18027200096523255i")}};
        exp = new CMatrixOld(expEntries);

        assertEquals(exp, A.mult(BReal));

        // ---------------------- Sub-case 4 ----------------------
        A = new CsrCMatrixOld(10, 15);
        BReal = new CsrMatrixOld(11, 124);
        assertThrows(LinearAlgebraException.class, ()->A.mult(BReal));

        A = new CsrCMatrixOld(156, 9);
        BReal = new CsrMatrixOld(11, 156);
        assertThrows(LinearAlgebraException.class, ()->A.mult(BReal));
    }


    @Test
    void standardAsSparseTests() {
        // ---------------------- Sub-case 1 ----------------------
        aShape = new Shape(15, 15);
        aEntries = new CNumber[]{new CNumber(0.02906, 0.92214), new CNumber(0.14704, 0.01925),
                new CNumber(0.34155, 0.30928), new CNumber(0.8772, 0.7713), new CNumber(0.20399, 0.05695),
                new CNumber(0.74353, 0.31468), new CNumber(0.62607, 0.00866), new CNumber(0.31987, 0.05314),
                new CNumber(0.23263, 0.34789), new CNumber(0.15689, 0.36907), new CNumber(0.26331, 0.41601),
                new CNumber(0.52454, 0.54997), new CNumber(0.9723, 0.85122), new CNumber(0.62609, 0.37092),
                new CNumber(0.78645, 0.36634), new CNumber(0.53599, 0.11949), new CNumber(0.21033, 0.09584),
                new CNumber(0.51893, 0.63296), new CNumber(0.85857, 0.88578), new CNumber(0.95031, 0.77742),
                new CNumber(0.34214, 0.18124), new CNumber(0.97286, 0.60256)};
        aRowPointers = new int[]{0, 3, 6, 7, 9, 11, 12, 15, 18, 18, 18, 19, 20, 20, 22, 22};
        aColIndices = new int[]{10, 11, 14, 8, 11, 13, 2, 2, 9, 1, 12, 8, 0, 2, 5, 0, 7, 12, 12, 4, 3, 6};
        A = new CsrCMatrixOld(aShape, aEntries, aRowPointers, aColIndices);

        bShape = new Shape(15, 15);
        bEntries = new CNumber[]{new CNumber(0.74105, 0.24133), new CNumber(0.94406, 0.25212),
                new CNumber(0.67135, 0.36152), new CNumber(0.26588, 0.67924), new CNumber(0.25135, 0.05665),
                new CNumber(0.62094, 0.22655), new CNumber(0.70393, 0.20521), new CNumber(0.79444, 0.90171),
                new CNumber(0.32948, 0.4029), new CNumber(0.74416, 0.65621), new CNumber(0.64428, 0.50642),
                new CNumber(0.0099, 0.17101), new CNumber(0.54967, 0.78882), new CNumber(0.42504, 0.6184),
                new CNumber(0.55522, 0.68452), new CNumber(0.69885, 0.99451), new CNumber(0.59188, 0.96865),
                new CNumber(0.77953, 0.19341), new CNumber(0.08759, 0.78246), new CNumber(0.36108, 0.66323),
                new CNumber(0.30708, 0.06817), new CNumber(0.03297, 0.88127)};
        bRowPointers = new int[]{0, 4, 5, 6, 9, 9, 10, 12, 13, 15, 15, 15, 18, 18, 19, 22};
        bColIndices = new int[]{1, 2, 3, 8, 2, 7, 6, 8, 9, 12, 9, 12, 9, 6, 14, 1, 10, 12, 10, 4, 12, 13};
        B = new CsrCMatrixOld(bShape, bEntries, bRowPointers, bColIndices);

        expCsrShape = new Shape(15, 15);
        expCsrEntries = new CNumber[]{new CNumber(0.0836145865, 0.1596856129),
                new CNumber(-0.08179690039999997, 0.33820102890000003),
                new CNumber(0.06838352269999999, 0.15382398600000002), new CNumber(0.19469850510000003, 0.1617021248),
                new CNumber(-0.2612982821, 0.31119473010000004), new CNumber(0.08592106700000002, 0.2426696024),
                new CNumber(-0.10412683199999995, 0.8702938319999999), new CNumber(-0.11552573640000001, 0.8406477845),
                new CNumber(0.1480016252, 0.0838479394), new CNumber(-0.04093129200000001, 1.02870213),
                new CNumber(0.38678998280000004, 0.14721349890000002), new CNumber(0.1865812108, 0.10546330009999999),
                new CNumber(0.018526486000000005, 0.10165356300000002),
                new CNumber(-0.11715096639999997, 0.5581347847999999), new CNumber(-0.08523036559999997, 0.6644124642),
                new CNumber(0.5150979924, 0.8654417400000001), new CNumber(0.7032999516, 1.0487390292),
                new CNumber(0.34502055060000003, 0.922972443), new CNumber(0.3047323986, 0.37215975430000003),
                new CNumber(-0.31966754879999987, 0.8867474256), new CNumber(0.34484866059999997, 0.7886919289000001),
                new CNumber(0.3683588678, 0.2178985312), new CNumber(0.4758809006, 0.2479395282),
                new CNumber(0.31663886169999994, 0.2739907163), new CNumber(0.061346633600000006, 0.39583584879999995),
                new CNumber(0.0400115823, 0.21859288339999997), new CNumber(0.20365034979999996, 0.19779082260000003),
                new CNumber(0.1083837812, 0.45249536500000004), new CNumber(0.3613524967999999, 1.0784562791999999),
                new CNumber(-0.09341247159999999, 0.1723341326)};
        expCsrRowPointers = new int[]{0, 5, 10, 11, 12, 13, 15, 21, 26, 26, 26, 26, 26, 26, 30, 30};
        expCsrColIndices = new int[]{1, 4, 10, 12, 13, 1, 6, 10, 12, 14, 7, 7, 2, 6, 14, 1, 2, 3, 7, 8, 12, 1, 2, 3, 8, 9, 6, 8, 9, 12};
        expCsr = new CsrCMatrixOld(expCsrShape, expCsrEntries, expCsrRowPointers, expCsrColIndices);

        assertEquals(expCsr, A.mult2CSR(B));

        // ---------------------- Sub-case 2 ----------------------
        aShape = new Shape(1201, 502);
        aEntries = new CNumber[]{new CNumber(0.80192, 0.00457), new CNumber(0.75879, 0.96137), new CNumber(0.7197, 0.79965), new CNumber(0.27629, 0.72594), new CNumber(0.49392, 0.66413), new CNumber(0.4067, 0.26811), new CNumber(0.10677, 0.6162), new CNumber(0.07077, 0.41851), new CNumber(0.50209, 0.29478), new CNumber(0.40524, 0.70039), new CNumber(0.30549, 0.65839), new CNumber(0.60399, 0.91417), new CNumber(0.3789, 0.59518), new CNumber(0.28813, 0.22652), new CNumber(0.95052, 0.01256), new CNumber(0.30087, 0.23646), new CNumber(0.92451, 0.7899), new CNumber(0.7624, 0.63808), new CNumber(0.79608, 0.04811), new CNumber(0.1743, 0.94944), new CNumber(0.00145, 0.56106), new CNumber(0.25729, 0.03609), new CNumber(0.72895, 0.64931), new CNumber(0.47464, 0.41308), new CNumber(0.71833, 0.15304), new CNumber(0.98708, 0.98231), new CNumber(0.64243, 0.95304), new CNumber(0.90844, 0.90654), new CNumber(0.11218, 0.33391), new CNumber(0.4905, 0.98171), new CNumber(0.81564, 0.68582), new CNumber(0.1198, 0.38116), new CNumber(0.33929, 0.50226), new CNumber(0.54688, 0.69092), new CNumber(0.94487, 0.4582), new CNumber(0.4023, 0.02026), new CNumber(0.2841, 0.29161), new CNumber(0.40666, 0.46315), new CNumber(0.47243, 0.5369), new CNumber(0.46895, 0.87651), new CNumber(0.17839, 0.12726), new CNumber(0.3982, 0.43276), new CNumber(0.94624, 0.59931), new CNumber(0.55679, 0.95208), new CNumber(0.30977, 0.8028), new CNumber(0.31346, 0.2119), new CNumber(0.56704, 0.88278), new CNumber(0.94851, 0.51192), new CNumber(0.13748, 0.13437), new CNumber(0.03488, 0.6052), new CNumber(0.15132, 0.81863), new CNumber(0.09701, 0.64024), new CNumber(0.63921, 0.09402), new CNumber(0.14725, 0.86802), new CNumber(0.74567, 0.92625), new CNumber(0.71516, 0.17888), new CNumber(0.76541, 0.02061), new CNumber(0.90628, 0.80481), new CNumber(0.40745, 0.41716), new CNumber(0.97685, 0.29665)};
        aRowPointers = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60};
        aColIndices = new int[]{95, 341, 430, 239, 207, 33, 32, 126, 129, 381, 229, 441, 23, 170, 183, 494, 133, 85, 451, 449, 310, 326, 213, 332, 91, 154, 365, 470, 425, 469, 122, 404, 356, 143, 373, 199, 497, 192, 307, 82, 166, 460, 310, 58, 436, 316, 379, 210, 384, 70, 94, 282, 184, 322, 392, 327, 66, 333, 221, 455};
        A = new CsrCMatrixOld(aShape, aEntries, aRowPointers, aColIndices);

        bShape = new Shape(502, 1562);
        bEntries = new CNumber[]{new CNumber(0.87381, 0.58498), new CNumber(0.35145, 0.67192), new CNumber(0.4689, 0.68118), new CNumber(0.10492, 0.13955), new CNumber(0.63021, 0.1941), new CNumber(0.41652, 0.0193), new CNumber(0.21681, 0.47653), new CNumber(0.28913, 0.87367), new CNumber(0.56016, 0.89715), new CNumber(0.78732, 0.71132), new CNumber(0.42402, 0.06502), new CNumber(0.50521, 0.03191), new CNumber(0.96191, 0.06612), new CNumber(0.02487, 0.29677), new CNumber(0.64649, 0.73785), new CNumber(0.06305, 0.12956), new CNumber(0.50408, 0.93089), new CNumber(0.29309, 0.76607), new CNumber(0.2266, 0.41987), new CNumber(0.3, 0.3807), new CNumber(0.92043, 0.15509), new CNumber(0.14899, 0.07406), new CNumber(0.63368, 0.24698), new CNumber(0.75273, 0.00524), new CNumber(0.14398, 0.1582), new CNumber(0.6959, 0.74272), new CNumber(0.10484, 0.54408), new CNumber(0.0121, 0.85685), new CNumber(0.55037, 0.34922), new CNumber(0.90439, 0.36893), new CNumber(0.59893, 0.12205), new CNumber(0.17189, 0.60215), new CNumber(0.39049, 0.35365), new CNumber(0.06375, 0.83679), new CNumber(0.534, 0.78719), new CNumber(0.97489, 0.44991), new CNumber(0.34922, 0.0231), new CNumber(0.34234, 0.86789), new CNumber(0.53787, 0.67613), new CNumber(0.79089, 0.97324), new CNumber(0.53436, 0.56956), new CNumber(0.39044, 0.79148), new CNumber(0.40245, 0.58767), new CNumber(0.52231, 0.40833), new CNumber(0.84053, 0.87318), new CNumber(0.75298, 0.63637), new CNumber(0.0142, 0.94239), new CNumber(0.32972, 0.15121), new CNumber(0.12827, 0.99429), new CNumber(0.23446, 0.94056), new CNumber(0.83445, 0.51429), new CNumber(0.38824, 0.60358), new CNumber(0.61625, 0.18771), new CNumber(0.26599, 0.72239), new CNumber(0.58243, 0.70938), new CNumber(0.18207, 0.97884), new CNumber(0.94311, 0.69332), new CNumber(0.0318, 0.24647), new CNumber(0.58024, 0.34611), new CNumber(0.27172, 0.70768), new CNumber(0.70786, 0.41123), new CNumber(0.53742, 0.63946), new CNumber(0.66246, 0.60684), new CNumber(0.40153, 0.15107), new CNumber(0.2691, 0.32465), new CNumber(0.39626, 0.33517), new CNumber(0.67378, 0.37866), new CNumber(0.11977, 0.09945), new CNumber(0.43525, 0.39079), new CNumber(0.24332, 0.39348), new CNumber(0.96248, 0.57729), new CNumber(0.34665, 0.45364), new CNumber(0.89361, 0.77448), new CNumber(0.08791, 0.19295), new CNumber(0.4271, 0.6714), new CNumber(0.63674, 0.3468), new CNumber(0.8728, 0.29522), new CNumber(0.48813, 0.63073)};
        bRowPointers = new int[]{0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 40, 40, 40, 40, 40, 41, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 56, 56, 56, 56, 57, 57, 57, 57, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 67, 67, 67, 67, 67, 67, 67, 67, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 72, 72, 72, 72, 72, 72, 72, 73, 73, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78};
        bColIndices = new int[]{731, 743, 558, 79, 1072, 1089, 498, 165, 775, 1365, 1062, 1138, 469, 571, 721, 1390, 1053, 298, 320, 502, 491, 1128, 716, 438, 1514, 17, 378, 343, 490, 1249, 656, 624, 722, 819, 1081, 1485, 197, 271, 353, 886, 1305, 1143, 1285, 1476, 920, 202, 645, 600, 612, 246, 636, 230, 1453, 651, 89, 466, 910, 1523, 580, 113, 241, 1007, 12, 1517, 1231, 702, 1103, 691, 1278, 1110, 129, 190, 1349, 821, 169, 423, 173, 955};
        B = new CsrCMatrixOld(bShape, bEntries, bRowPointers, bColIndices);

        expCsrShape = new Shape(1201, 1562);
        expCsrEntries = new CNumber[]{new CNumber(-0.31500597069999997, 0.4115712337), new CNumber(-0.03958583130000001, 0.2519336801), new CNumber(-0.190607289, 0.24962508249999998), new CNumber(0.008148769799999997, 0.25998728400000004), new CNumber(0.07810706740000001, 0.1693066798), new CNumber(-0.1218710389, 0.9205536905), new CNumber(-0.09505593260000002, 0.2549774294), new CNumber(0.3474709316, 0.6360371848), new CNumber(-0.27257985430000004, 0.3786958405), new CNumber(0.25091500310000003, 0.49876750570000006), new CNumber(0.20953447490000005, 0.5900009419)};
        expCsrRowPointers = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11};
        expCsrColIndices = new int[]{624, 498, 343, 1514, 230, 1081, 821, 716, 651, 1138, 1485};
        expCsr = new CsrCMatrixOld(expCsrShape, expCsrEntries, expCsrRowPointers, expCsrColIndices);

        assertEquals(expCsr, A.mult2CSR(B));

        // ---------------------- Sub-case 3 ----------------------
        aShape = new Shape(12, 15);
        aEntries = new CNumber[]{new CNumber(0.22316, 0.35562), new CNumber(0.94242, 0.37764), new CNumber(0.6349, 0.4183), new CNumber(0.98095, 0.96738), new CNumber(0.79842, 0.03641), new CNumber(0.49714, 0.20468), new CNumber(0.44936, 0.37731), new CNumber(0.82674, 0.72264), new CNumber(0.29454, 0.8007), new CNumber(0.64223, 0.46247), new CNumber(0.24694, 0.87524), new CNumber(0.0005, 0.42085), new CNumber(0.2366, 0.44245), new CNumber(0.9721, 0.0875), new CNumber(0.55155, 0.62224), new CNumber(0.76339, 0.05573), new CNumber(0.57728, 0.45146), new CNumber(0.87833, 0.75748)};
        aRowPointers = new int[]{0, 2, 3, 4, 5, 8, 9, 10, 12, 14, 16, 17, 18};
        aColIndices = new int[]{5, 11, 11, 7, 4, 2, 7, 13, 7, 2, 3, 7, 4, 7, 3, 10, 7, 14};
        A = new CsrCMatrixOld(aShape, aEntries, aRowPointers, aColIndices);

        bShape = new Shape(15, 3);
        bRealEntries = new double[]{0.8897510865291638, 0.02884886126710373, 0.9073269737206647, 0.9197691430889076, 0.6633399541563916
                , 0.7645310847724797, 0.6949989054896308, 0.04413656628380547, 0.13411817488702715};
        bRowPointers = new int[]{0, 1, 1, 1, 3, 3, 3, 4, 6, 8, 8, 8, 8, 8, 8, 9};
        bColIndices = new int[]{0, 0, 2, 2, 1, 2, 0, 2, 0};
        BReal = new CsrMatrixOld(bShape, bRealEntries, bRowPointers, bColIndices);

        expCsrShape = new Shape(12, 3);
        expCsrEntries = new CNumber[]{new CNumber(0.6507033280297123, 0.64170180485181), new CNumber(0.7499667676075639, 0.7395920807872014), new CNumber(0.2980784417997161, 0.2502847981027481), new CNumber(0.34354968825336146, 0.2884652235955043), new CNumber(0.1953801500972236, 0.5311363012930227), new CNumber(0.22518498570888618, 0.6121600395773245), new CNumber(0.0071239378012985955, 0.02524967733541987), new CNumber(0.0003316699770781958, 0.2791666197067174), new CNumber(0.22443758843296718, 1.1158817675057726), new CNumber(0.6448327694354282, 0.05804224598868426), new CNumber(0.7432006675073275, 0.06689646991759196), new CNumber(0.015911589431871064, 0.017950915434842625), new CNumber(0.5004361923556326, 0.5645751361279464), new CNumber(0.38293288873540177, 0.2994714557034445), new CNumber(0.44134850461745706, 0.3451552035313836), new CNumber(0.11780001654852257, 0.10159183511342533)};
        expCsrRowPointers = new int[]{0, 0, 0, 2, 2, 4, 6, 6, 9, 11, 13, 15, 16};
        expCsrColIndices = new int[]{1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 2, 1, 2, 0};
        expCsr = new CsrCMatrixOld(expCsrShape, expCsrEntries, expCsrRowPointers, expCsrColIndices);

        assertEquals(expCsr, A.mult2CSR(BReal));

        // ---------------------- Sub-case 4 ----------------------
        A = new CsrCMatrixOld(10, 15);
        B = new CsrCMatrixOld(11, 124);
        assertThrows(LinearAlgebraException.class, ()->A.mult2CSR(B));

        A = new CsrCMatrixOld(156, 9);
        B = new CsrCMatrixOld(11, 156);
        assertThrows(LinearAlgebraException.class, ()->A.mult2CSR(B));

        // ---------------------- Sub-case 5 ----------------------
        A = new CsrCMatrixOld(10, 15);
        BReal = new CsrMatrixOld(11, 124);
        assertThrows(LinearAlgebraException.class, ()->A.mult2CSR(BReal));

        A = new CsrCMatrixOld(156, 9);
        BReal = new CsrMatrixOld(11, 156);
        assertThrows(LinearAlgebraException.class, ()->A.mult2CSR(BReal));
    }
}
