package org.flag4j.rng;


import org.flag4j.algebraic_structures.fields.Complex128;
import org.flag4j.arrays.Shape;
import org.flag4j.arrays.sparse.CooCMatrix;
import org.flag4j.arrays.sparse.CooMatrix;
import org.flag4j.arrays.sparse.CsrMatrix;
import org.flag4j.util.ArrayUtils;
import org.flag4j.util.ParameterChecks;

import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 * <p>An instance of this class is used for generating streams of pseudorandom sparse tensors, matrices, and vectors.</p>
 *
 * <p>The random values in instances of this class are generated by an instance of the {@link RandomArray}.</p>
 *
 * @see RandomDenseTensor
 */
public class RandomSparseTensor {


    /**
     * Complex pseudorandom number generator.
     */
    private final RandomComplex COMPLEX_RNG;
    /**
     * Generator for random arrays.
     */
    private final RandomArray RAND_ARRAY;


    /**
     * Constructs a new pseudorandom tensor generator with a seed which is unlikely to be the same as other
     * from any other invocation of this constructor.
     */
    public RandomSparseTensor() {
        COMPLEX_RNG = new RandomComplex();
        RAND_ARRAY = new RandomArray(COMPLEX_RNG);
    }


    /**
     * Constructs a pseudorandom tensor generator with a specified seed. Use this constructor for reproducible results.
     * @param seed Seed of the pseudorandom tensor generator.
     */
    public RandomSparseTensor(long seed) {
        COMPLEX_RNG = new RandomComplex(seed);
        RAND_ARRAY = new RandomArray(COMPLEX_RNG);
    }


    /**
     * Generates a random sparse matrix with the specified sparsity. The non-zero values will have a uniform
     * distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param rows Number of rows in the sparse matrix.
     * @param cols Number of columns in the sparse matrix.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param sparsity Desired sparsity of the resulting matrix. i.e. the percent of values which are zero. Must be
     *                 a value in {@code [0.0, 1.0]}.
     * @return A sparse matrix with sparsity approximately equal to {@code sparsity} filled with random values uniformly
     * distributed in {@code [min, max)}.
     */
    public CooMatrix randomCooMatrix(int rows, int cols, double min, double max, double sparsity) {
        return randomCooMatrix(new Shape(rows, cols), min, max, sparsity);
    }


    /**
     * Generates a random sparse matrix with the specified sparsity. The non-zero values will have a uniform
     * distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param shape Shape of the sparse matrix to generate.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param sparsity Desired sparsity of the resulting matrix. i.e. the percent of values which are zero. Must be
     *                 a value in {@code [0.0, 1.0]}.
     * @return A sparse matrix with sparsity approximately equal to {@code sparsity} filled with random values uniformly
     * distributed in {@code [min, max)}.
     */
    public CooMatrix randomCooMatrix(Shape shape, double min, double max, double sparsity) {
        ParameterChecks.ensureRank(shape, 2);

        int numEntries = new BigDecimal(shape.totalEntries()).multiply(BigDecimal.valueOf(1.0-sparsity))
                .setScale(0, RoundingMode.HALF_UP).intValueExact();

        return randomCooMatrix(shape, min, max, numEntries);
    }


    /**
     * Generates a random sparse matrix with the specified number of non-zero entries. The non-zero values will have
     * a uniform distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param rows Number of rows in the random sparse matrix.
     * @param cols Number of columns in the random sparse matrix.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param numNonZeroEntries Desired number of non-zero entries int the random sparse matrix.
     * @return A sparse matrix filled with the specified number of non-zero entries uniformly
     * distributed in {@code [min, max)}.
     */
    public CooMatrix randomCooMatrix(int rows, int cols, double min, double max, int numNonZeroEntries) {
        return randomCooMatrix(new Shape(rows, cols), min, max, numNonZeroEntries);
    }


    /**
     * Generates a random sparse matrix with the specified number of non-zero entries. The non-zero values will have
     * a uniform distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param shape Shape of the sparse matrix to generate.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param numNonZeroEntries Desired number of non-zero entries int the random sparse matrix.
     * @return A sparse matrix filled with the specified number of non-zero entries uniformly
     * distributed in {@code [min, max)}.
     */
    public CooMatrix randomCooMatrix(Shape shape, double min, double max, int numNonZeroEntries) {
        ParameterChecks.ensureGreaterEq(0, numNonZeroEntries);
        ParameterChecks.ensureLessEq(shape.totalEntries(), numNonZeroEntries, "numNonZeroEntries");

        double[] entries = RAND_ARRAY.genUniformRealArray(numNonZeroEntries, min, max);
        int[][] indices = RAND_ARRAY.randomUniqueIndices2D(numNonZeroEntries, 0, shape.get(0), 0, shape.get(1));

        return new CooMatrix(shape, entries, indices[0], indices[1]);
    }


    /**
     * Generates a random sparse matrix with the specified sparsity. The non-zero values will have a uniform
     * distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param rows Number of rows in the sparse matrix.
     * @param cols Number of columns in the sparse matrix.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param sparsity Desired sparsity of the resulting matrix. i.e. the percent of values which are zero. Must be
     *                 a value in {@code [0.0, 1.0]}.
     * @return A sparse matrix with sparsity approximately equal to {@code sparsity} filled with random values uniformly
     * distributed in {@code [min, max)}.
     */
    public CsrMatrix randomCsrMatrix(int rows, int cols, double min, double max, double sparsity) {
        return randomCooMatrix(new Shape(rows, cols), min, max, sparsity).toCsr();
    }


    /**
     * Generates a random sparse matrix with the specified sparsity. The non-zero values will have a uniform
     * distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param shape Shape of the sparse matrix to generate.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param sparsity Desired sparsity of the resulting matrix. i.e. the percent of values which are zero. Must be
     *                 a value in {@code [0.0, 1.0]}.
     * @return A sparse matrix with sparsity approximately equal to {@code sparsity} filled with random values uniformly
     * distributed in {@code [min, max)}.
     */
    public CsrMatrix randomCsrMatrix(Shape shape, double min, double max, double sparsity) {
        ParameterChecks.ensureRank(shape, 2);

        int numEntries = new BigDecimal(shape.totalEntries()).multiply(BigDecimal.valueOf(1.0-sparsity))
                .setScale(0, RoundingMode.HALF_UP).intValueExact();

        return randomCooMatrix(shape, min, max, numEntries).toCsr();
    }


    /**
     * Generates a random sparse matrix with the specified number of non-zero entries. The non-zero values will have
     * a uniform distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param rows Number of rows in the random sparse matrix.
     * @param cols Number of columns in the random sparse matrix.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param numNonZeroEntries Desired number of non-zero entries int the random sparse matrix.
     * @return A sparse matrix filled with the specified number of non-zero entries uniformly
     * distributed in {@code [min, max)}.
     */
    public CsrMatrix randomCsrMatrix(int rows, int cols, double min, double max, int numNonZeroEntries) {
        return randomCooMatrix(new Shape(rows, cols), min, max, numNonZeroEntries).toCsr();
    }


    /**
     * Generates a random sparse matrix with the specified number of non-zero entries. The non-zero values will have
     * a uniform distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param shape Shape of the sparse matrix to generate.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param numNonZeroEntries Desired number of non-zero entries int the random sparse matrix.
     * @return A sparse matrix filled with the specified number of non-zero entries uniformly
     * distributed in {@code [min, max)}.
     */
    public CsrMatrix randomCsrMatrix(Shape shape, double min, double max, int numNonZeroEntries) {
        ParameterChecks.ensureGreaterEq(0, numNonZeroEntries);
        ParameterChecks.ensureLessEq(shape.totalEntries(), numNonZeroEntries, "numNonZeroEntries");

        double[] entries = RAND_ARRAY.genUniformRealArray(numNonZeroEntries, min, max);
        int[][] indices = RAND_ARRAY.randomUniqueIndices2D(numNonZeroEntries, 0, shape.get(0), 0, shape.get(1));

        return new CooMatrix(shape, entries, indices[0], indices[1]).toCsr();
    }


    /**
     * Generates a symmetric {@link CooMatrix COO matrix} filled with pseudorandom values uniformly distributed in {@code [min, max)}.
     * @param size Number of rows and columns in the resulting matrix (the result will be a square matrix).
     * @param min Minimum value in uniform distribution.
     * @param max Maximum value in uniform distribution.
     * @param sparsity Desired sparsity of the resulting matrix. i.e. the percent of values which are zero. Must be
     * a value in {@code [0.0, 1.0]}. The true sparsity may slightly differ to ensure the matrix is symmetric.
     * @return A symmetric matrix filled with pseudorandom values uniformly distributed in {@code [min, max)}.
     * @throws IllegalArgumentException If {@code sparsity} is not in the range {@code [0.0, 1.0]}.
     */
    public CooMatrix randomSymmetricCooMatrix(int size, int min, int max, double sparsity) {
        ParameterChecks.ensureInRange(sparsity, 0, 1, "sparsity");
        Shape shape = new Shape(size, size);

        int numEntries = new BigDecimal(size).pow(2).multiply(BigDecimal.valueOf(1.0-sparsity))
                .setScale(0, RoundingMode.HALF_UP).intValueExact();
        numEntries /= 2;

        // Generate half of the random entries.
        double[] entries = RAND_ARRAY.genUniformRealArray(numEntries, min, max);
        int[][] indices = RAND_ARRAY.randomUniqueIndices2D(numEntries, 0, shape.get(0), 0, shape.get(1));

        // Mirror entries across diagonal.
        entries = ArrayUtils.join(entries, entries);
        indices = new int[][]{
                ArrayUtils.join(indices[0], indices[1]),
                ArrayUtils.join(indices[1], indices[0])
        };

        CooMatrix randMat = new CooMatrix(shape, entries, indices[0], indices[1]);
        randMat.sortIndices();

        return new CooMatrix(shape, entries, indices[0], indices[1]);
    }


    /**
     * Generates a symmetric {@link CsrMatrix CSR matrix} filled with pseudorandom values uniformly distributed in {@code [min, max)}.
     * @param size Number of rows and columns in the resulting matrix (the result will be a square matrix).
     * @param min Minimum value in uniform distribution.
     * @param max Maximum value in uniform distribution.
     * @param sparsity Desired sparsity of the resulting matrix. i.e. the percent of values which are zero. Must be
     * a value in {@code [0.0, 1.0]}. The true sparsity may slightly differ to ensure the matrix is symmetric.
     * @return A symmetric matrix filled with pseudorandom values uniformly distributed in {@code [min, max)}.
     * @throws IllegalArgumentException If {@code sparsity} is not in the range {@code [0.0, 1.0]}.
     */
    public CsrMatrix randomSymmetricCsrMatrix(int size, int min, int max, double sparsity) {
        return randomSymmetricCooMatrix(size, min, max, sparsity).toCsr();
    }


    /**
     * Generates a random sparse matrix with the specified sparsity. The non-zero values will have a uniform
     * distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param rows Number of rows in the sparse matrix.
     * @param cols Number of columns in the sparse matrix.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param sparsity Desired sparsity of the resulting matrix. i.e. the percent of values which are zero. Must be
     *                 a value in {@code [0.0, 1.0]}.
     * @return A sparse matrix with sparsity approximately equal to {@code sparsity} filled with random values uniformly
     * distributed in {@code [min, max)}.
     */
    public CooCMatrix randomSparseCMatrix(int rows, int cols, double min, double max, double sparsity) {
        return randomSparseCMatrix(new Shape(rows, cols), min, max, sparsity);
    }


    /**
     * Generates a random sparse matrix with the specified sparsity. The non-zero values will have a uniform
     * distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param shape Shape of the sparse matrix to generate.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param sparsity Desired sparsity of the resulting matrix. i.e. the percent of values which are zero. Must be
     *                 a value in {@code [0.0, 1.0]}.
     * @return A sparse matrix with sparsity approximately equal to {@code sparsity} filled with random values uniformly
     * distributed in {@code [min, max)}.
     */
    public CooCMatrix randomSparseCMatrix(Shape shape, double min, double max, double sparsity) {
        ParameterChecks.ensureInRange(sparsity, 0, 1, "sparsity");
        int numEntries = new BigDecimal(shape.totalEntries()).multiply(BigDecimal.valueOf(1.0-sparsity))
                .setScale(0, RoundingMode.HALF_UP).intValueExact();

        return randomSparseCMatrix(shape, min, max, numEntries);
    }


    /**
     * Generates a random sparse matrix with the specified number of non-zero entries. The non-zero values will have
     * a uniform distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param rows Number of rows in the random sparse matrix.
     * @param cols Number of columns in the random sparse matrix.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param numNonZeroEntries Desired number of non-zero entries int the random sparse matrix.
     * @return A sparse matrix filled with the specified number of non-zero entries uniformly
     * distributed in {@code [min, max)}.
     */
    public CooCMatrix randomSparseCMatrix(int rows, int cols, double min, double max, int numNonZeroEntries) {
        return randomSparseCMatrix(new Shape(rows, cols), min, max, numNonZeroEntries);
    }


    /**
     * Generates a random sparse matrix with the specified number of non-zero entries. The non-zero values will have
     * a uniform distribution in {@code [min, max)}. Values will be uniformly distributed throughout the matrix.
     * @param shape Shape of the sparse matrix to generate.
     * @param min Minimum value for random non-zero values in the sparse matrix.
     * @param max Maximum value for random non-zero values
     * @param numNonZeroEntries Desired number of non-zero entries int the random sparse matrix.
     * @return A sparse matrix filled with the specified number of non-zero entries uniformly
     * distributed in {@code [min, max)}.
     */
    public CooCMatrix randomSparseCMatrix(Shape shape, double min, double max, int numNonZeroEntries) {
        ParameterChecks.ensureGreaterEq(0, numNonZeroEntries);

        Complex128[] entries = RAND_ARRAY.genUniformComplex128Array(numNonZeroEntries, min, max);
        int[][] indices = RAND_ARRAY.randomUniqueIndices2D(numNonZeroEntries, 0, shape.get(0), 0, shape.get(1));

        return new CooCMatrix(shape, entries, indices[0], indices[1]);
    }
}
